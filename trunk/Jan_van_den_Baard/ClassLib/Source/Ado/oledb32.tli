// Created by Microsoft (R) C/C++ Compiler Version 13.10.6030 (c123070b).
//
// p:\repository\jan_van_den_baard\classlib\output\x86\debug\mbcs\obj\oledb32.tli
//
// Wrapper implementations for Win32 type library 2206CEB0-19C1-11D1-89E0-00C04FD7A829
// compiler-generated file created 03/27/08 at 09:40:39 - DO NOT EDIT!

#pragma once

//
// interface IDataSourceLocator wrapper method implementations
//

inline long IDataSourceLocator::GethWnd ( ) {
    long _result = 0;
    HRESULT _hr = get_hWnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataSourceLocator::PuthWnd ( long phwndParent ) {
    HRESULT _hr = put_hWnd(phwndParent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IDataSourceLocator::PromptNew ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_PromptNew(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IDataSourceLocator::PromptEdit ( IDispatch * * ppADOConnection ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PromptEdit(ppADOConnection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDBPromptInitialize wrapper method implementations
//

inline HRESULT IDBPromptInitialize::PromptDataSource ( IUnknown * pUnkOuter, wireHWND hWndParent, unsigned long dwPromptOptions, unsigned long cSourceTypeFilter, unsigned long * rgSourceTypeFilter, LPWSTR pwszszzProviderFilter, GUID * riid, IUnknown * * ppDataSource ) {
    HRESULT _hr = raw_PromptDataSource(pUnkOuter, hWndParent, dwPromptOptions, cSourceTypeFilter, rgSourceTypeFilter, pwszszzProviderFilter, riid, ppDataSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDBPromptInitialize::PromptFileName ( wireHWND hWndParent, unsigned long dwPromptOptions, LPWSTR pwszInitialDirectory, LPWSTR pwszInitialFile, LPWSTR * ppwszSelectedFile ) {
    HRESULT _hr = raw_PromptFileName(hWndParent, dwPromptOptions, pwszInitialDirectory, pwszInitialFile, ppwszSelectedFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDataInitialize wrapper method implementations
//

inline HRESULT IDataInitialize::GetDataSource ( IUnknown * pUnkOuter, unsigned long dwClsCtx, LPWSTR pwszInitializationString, GUID * riid, IUnknown * * ppDataSource ) {
    HRESULT _hr = raw_GetDataSource(pUnkOuter, dwClsCtx, pwszInitializationString, riid, ppDataSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDataInitialize::GetInitializationString ( IUnknown * pDataSource, char fIncludePassword, LPWSTR * ppwszInitString ) {
    HRESULT _hr = raw_GetInitializationString(pDataSource, fIncludePassword, ppwszInitString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDataInitialize::CreateDBInstance ( GUID * clsidProvider, IUnknown * pUnkOuter, unsigned long dwClsCtx, LPWSTR pwszReserved, GUID * riid, IUnknown * * ppDataSource ) {
    HRESULT _hr = raw_CreateDBInstance(clsidProvider, pUnkOuter, dwClsCtx, pwszReserved, riid, ppDataSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDataInitialize::RemoteCreateDBInstanceEx ( GUID * clsidProvider, IUnknown * pUnkOuter, unsigned long dwClsCtx, LPWSTR pwszReserved, struct _COSERVERINFO * pServerInfo, unsigned long cmq, GUID * * rgpIID, IUnknown * * rgpItf, HRESULT * rghr ) {
    HRESULT _hr = raw_RemoteCreateDBInstanceEx(clsidProvider, pUnkOuter, dwClsCtx, pwszReserved, pServerInfo, cmq, rgpIID, rgpItf, rghr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDataInitialize::LoadStringFromStorage ( LPWSTR pwszFileName, LPWSTR * ppwszInitializationString ) {
    HRESULT _hr = raw_LoadStringFromStorage(pwszFileName, ppwszInitializationString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDataInitialize::WriteStringToStorage ( LPWSTR pwszFileName, LPWSTR pwszInitializationString, unsigned long dwCreationDisposition ) {
    HRESULT _hr = raw_WriteStringToStorage(pwszFileName, pwszInitializationString, dwCreationDisposition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPersist wrapper method implementations
//

inline HRESULT IPersist::GetClassID ( GUID * pClassID ) {
    HRESULT _hr = raw_GetClassID(pClassID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPersistFile wrapper method implementations
//

inline HRESULT IPersistFile::IsDirty ( ) {
    HRESULT _hr = raw_IsDirty();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPersistFile::Load ( LPWSTR pszFileName, unsigned long dwMode ) {
    HRESULT _hr = raw_Load(pszFileName, dwMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPersistFile::Save ( LPWSTR pszFileName, long fRemember ) {
    HRESULT _hr = raw_Save(pszFileName, fRemember);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPersistFile::SaveCompleted ( LPWSTR pszFileName ) {
    HRESULT _hr = raw_SaveCompleted(pszFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPersistFile::GetCurFile ( LPWSTR * ppszFileName ) {
    HRESULT _hr = raw_GetCurFile(ppszFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAuthenticate wrapper method implementations
//

inline HRESULT IAuthenticate::Authenticate ( wireHWND * phwnd, LPWSTR * pszUsername, LPWSTR * pszPassword ) {
    HRESULT _hr = raw_Authenticate(phwnd, pszUsername, pszPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IBindResource wrapper method implementations
//

inline HRESULT IBindResource::RemoteBind ( IUnknown * pUnkOuter, LPWSTR pwszURL, unsigned long dwBindURLFlags, GUID * rguid, GUID * riid, struct IAuthenticate * pAuthenticate, IUnknown * pSessionUnkOuter, GUID * piid, IUnknown * * ppSession, unsigned long * pdwBindStatus, IUnknown * * ppUnk ) {
    HRESULT _hr = raw_RemoteBind(pUnkOuter, pwszURL, dwBindURLFlags, rguid, riid, pAuthenticate, pSessionUnkOuter, piid, ppSession, pdwBindStatus, ppUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICreateRow wrapper method implementations
//

inline HRESULT ICreateRow::RemoteCreateRow ( IUnknown * pUnkOuter, LPWSTR pwszURL, unsigned long dwBindURLFlags, GUID * rguid, GUID * riid, struct IAuthenticate * pAuthenticate, IUnknown * pSessionUnkOuter, GUID * piid, IUnknown * * ppSession, unsigned long * pdwBindStatus, LPWSTR * ppwszNewURL, IUnknown * * ppUnk ) {
    HRESULT _hr = raw_RemoteCreateRow(pUnkOuter, pwszURL, dwBindURLFlags, rguid, riid, pAuthenticate, pSessionUnkOuter, piid, ppSession, pdwBindStatus, ppwszNewURL, ppUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRegisterProvider wrapper method implementations
//

inline HRESULT IRegisterProvider::RemoteGetURLMapping ( LPWSTR pwszURL, unsigned long dwReserved, GUID * pclsidProvider ) {
    HRESULT _hr = raw_RemoteGetURLMapping(pwszURL, dwReserved, pclsidProvider);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IRegisterProvider::SetURLMapping ( LPWSTR pwszURL, unsigned long dwReserved, GUID * rclsidProvider ) {
    HRESULT _hr = raw_SetURLMapping(pwszURL, dwReserved, rclsidProvider);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IRegisterProvider::UnregisterProvider ( LPWSTR pwszURL, unsigned long dwReserved, GUID * rclsidProvider ) {
    HRESULT _hr = raw_UnregisterProvider(pwszURL, dwReserved, rclsidProvider);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IErrorInfo wrapper method implementations
//

inline HRESULT IErrorInfo::GetGUID ( GUID * pguid ) {
    HRESULT _hr = raw_GetGUID(pguid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IErrorInfo::GetSource ( BSTR * pBstrSource ) {
    HRESULT _hr = raw_GetSource(pBstrSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IErrorInfo::GetDescription ( BSTR * pBstrDescription ) {
    HRESULT _hr = raw_GetDescription(pBstrDescription);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IErrorInfo::GetHelpFile ( BSTR * pBstrHelpFile ) {
    HRESULT _hr = raw_GetHelpFile(pBstrHelpFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IErrorInfo::GetHelpContext ( unsigned long * pdwHelpContext ) {
    HRESULT _hr = raw_GetHelpContext(pdwHelpContext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDBProperties wrapper method implementations
//

inline HRESULT IDBProperties::RemoteGetProperties ( unsigned long cPropertyIDSets, struct tagDBPROPIDSET * rgPropertyIDSets, unsigned long * pcPropertySets, struct tagDBPROPSET * * prgPropertySets, struct IErrorInfo * * ppErrorInfoRem ) {
    HRESULT _hr = raw_RemoteGetProperties(cPropertyIDSets, rgPropertyIDSets, pcPropertySets, prgPropertySets, ppErrorInfoRem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDBProperties::RemoteGetPropertyInfo ( unsigned long cPropertyIDSets, struct tagDBPROPIDSET * rgPropertyIDSets, unsigned long * pcPropertyInfoSets, struct tagDBPROPINFOSET * * prgPropertyInfoSets, unsigned long * pcOffsets, unsigned long * * prgDescOffsets, unsigned long * pcbDescBuffer, unsigned short * * ppDescBuffer, struct IErrorInfo * * ppErrorInfoRem ) {
    HRESULT _hr = raw_RemoteGetPropertyInfo(cPropertyIDSets, rgPropertyIDSets, pcPropertyInfoSets, prgPropertyInfoSets, pcOffsets, prgDescOffsets, pcbDescBuffer, ppDescBuffer, ppErrorInfoRem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDBProperties::RemoteSetProperties ( unsigned long cPropertySets, struct tagDBPROPSET * rgPropertySets, unsigned long cTotalProps, unsigned long * rgPropStatus, struct IErrorInfo * * ppErrorInfoRem ) {
    HRESULT _hr = raw_RemoteSetProperties(cPropertySets, rgPropertySets, cTotalProps, rgPropStatus, ppErrorInfoRem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDBBinderProperties wrapper method implementations
//

inline HRESULT IDBBinderProperties::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISequentialStream wrapper method implementations
//

inline HRESULT ISequentialStream::RemoteRead ( unsigned char * pv, unsigned long cb, unsigned long * pcbRead ) {
    HRESULT _hr = raw_RemoteRead(pv, cb, pcbRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISequentialStream::RemoteWrite ( unsigned char * pv, unsigned long cb, unsigned long * pcbWritten ) {
    HRESULT _hr = raw_RemoteWrite(pv, cb, pcbWritten);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IStream wrapper method implementations
//

inline HRESULT IStream::RemoteSeek ( struct _LARGE_INTEGER dlibMove, unsigned long dwOrigin, struct _ULARGE_INTEGER * plibNewPosition ) {
    HRESULT _hr = raw_RemoteSeek(dlibMove, dwOrigin, plibNewPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStream::SetSize ( struct _ULARGE_INTEGER libNewSize ) {
    HRESULT _hr = raw_SetSize(libNewSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStream::RemoteCopyTo ( struct IStream * pstm, struct _ULARGE_INTEGER cb, struct _ULARGE_INTEGER * pcbRead, struct _ULARGE_INTEGER * pcbWritten ) {
    HRESULT _hr = raw_RemoteCopyTo(pstm, cb, pcbRead, pcbWritten);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStream::Commit ( unsigned long grfCommitFlags ) {
    HRESULT _hr = raw_Commit(grfCommitFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStream::Revert ( ) {
    HRESULT _hr = raw_Revert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStream::LockRegion ( struct _ULARGE_INTEGER libOffset, struct _ULARGE_INTEGER cb, unsigned long dwLockType ) {
    HRESULT _hr = raw_LockRegion(libOffset, cb, dwLockType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStream::UnlockRegion ( struct _ULARGE_INTEGER libOffset, struct _ULARGE_INTEGER cb, unsigned long dwLockType ) {
    HRESULT _hr = raw_UnlockRegion(libOffset, cb, dwLockType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStream::Stat ( struct tagSTATSTG * pstatstg, unsigned long grfStatFlag ) {
    HRESULT _hr = raw_Stat(pstatstg, grfStatFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStream::Clone ( struct IStream * * ppstm ) {
    HRESULT _hr = raw_Clone(ppstm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMarshal wrapper method implementations
//

inline HRESULT IMarshal::GetUnmarshalClass ( GUID * riid, void * pv, unsigned long dwDestContext, void * pvDestContext, unsigned long mshlflags, GUID * pCid ) {
    HRESULT _hr = raw_GetUnmarshalClass(riid, pv, dwDestContext, pvDestContext, mshlflags, pCid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMarshal::GetMarshalSizeMax ( GUID * riid, void * pv, unsigned long dwDestContext, void * pvDestContext, unsigned long mshlflags, unsigned long * pSize ) {
    HRESULT _hr = raw_GetMarshalSizeMax(riid, pv, dwDestContext, pvDestContext, mshlflags, pSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMarshal::MarshalInterface ( struct IStream * pstm, GUID * riid, void * pv, unsigned long dwDestContext, void * pvDestContext, unsigned long mshlflags ) {
    HRESULT _hr = raw_MarshalInterface(pstm, riid, pv, dwDestContext, pvDestContext, mshlflags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMarshal::UnmarshalInterface ( struct IStream * pstm, GUID * riid, void * * ppv ) {
    HRESULT _hr = raw_UnmarshalInterface(pstm, riid, ppv);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMarshal::ReleaseMarshalData ( struct IStream * pstm ) {
    HRESULT _hr = raw_ReleaseMarshalData(pstm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMarshal::DisconnectObject ( unsigned long dwReserved ) {
    HRESULT _hr = raw_DisconnectObject(dwReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

<html>

<head>
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type">
<title>CTrayNotifyIcon v1.65</title>
<link href="./naughter.css" rel="stylesheet" type="text/css">
</head>

<body>

<h2 align="left"><strong>CTrayNotifyIcon v1.65</strong></h2>
<p>Welcome to CTrayNotifyIcon, A freeware MFC/WTL class to encapsulate the tray 
notification API on Windows.</p>
<p>&nbsp;</p>
<table>
	<tr>
		<td><a href="#Features">Features</a></td>
	</tr>
	<tr>
		<td><a href="#Usage">Usage</a></td>
	</tr>
	<tr>
		<td><a href="#Copyright">Copyright</a></td>
	</tr>
	<tr>
		<td><a href="#History">History</a></td>
	</tr>
	<tr>
		<td><a href="#APIReference">API Reference</a></td>
	</tr>
	<tr>
		<td><a href="#Contact">Contacting the Author</a></td>
	</tr>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a name="Features"></a><strong>Features</strong> </h2>
<ul>
	<li>Simple and clean C++ interface. </li>
	<li>The classes are fully Unicode compliant and include Unicode built options 
	in the workspace file. </li>
	<li>All code compiles cleanly at warning level 4 and with Code Analysis.</li>
	<li>Supports all of the tray functionality right up to Windows 7, while at the 
	same time, the class will work without problems on older versions of Windows. Of course if 
	you want to use new features such as balloon tray icons etc, then this functionality 
	will of course be only available on later versions of Windows, so you still 
	may need to handle this issue in your client application if you want to support 
	specific older versions of Windows.</li>
	<li>Hides the complexity of having to deal with the messy NOTIFYICONDATA structure 
	and all its various quirks, which you probably will be familiar with if you 
	have coded directly to the &quot;Shell_NotifyIcon&quot; API.</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a name="Usage"></a><strong>Usage</strong> </h2>
<ul>
	<li>To use the class in your code simple include NTray.cpp in your project and 
	#include NTray.h in which ever of your modules needs to make calls to the class.</li>
	<li>As of v1.51, the code now uses ATL&#39;s CWindowImpl class in preference to 
	the author&#39;s CHookWnd class. This does mean that for MFC only client projects, 
	you will need to add ATL support to your project. Please see the sample app 
	included in the download for how to include ATL in an MFC project.</li>
	<li>As of v1.56, you can use the class without the need for pulling in MFC. 
	This is achieved by using WTL which is an open source library extension for 
	ATL to provide UI support along the lines of MFC. You can download WTL from
	<a href="http://sourceforge.net/projects/wtl/">http://sourceforge.net/projects/wtl/.</a></li>
	<li>As of v1.61, the classes are now designed for VC 2005 or later. They will 
	not compile on earlier releases of VC.</li>
	<li>To see the class in action, have a look at the code in the module &quot;mainfrm.cpp&quot;.
	</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><b><a name="Copyright"></a>Copyright</b></h2>
<ul>
	<li>You are allowed to include the source code in any product (commercial, shareware, 
	freeware or otherwise) when your product is released in binary form.</li>
	<li>You are allowed to modify the source code in any way you want except you 
	cannot modify the copyright details at the top of each module.</li>
	<li>If you want to distribute source code with your application, then you are 
	only allowed to distribute versions released by the author. This is to maintain 
	a single distribution point for the source code.</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a name="History"></a><strong>History</strong></h2>
<p><strong>v1.0 (14 May 1997)</strong> </p>
<ul>
	<li>Initial Public release.</li>
</ul>
<p><strong>v1.1 (25 November 1997)</strong> </p>
<ul>
	<li>Addition of HideIcon(), ShowIcon() &amp; MoveToExtremeRight() </li>
	<li>Support for animated tray icons</li>
</ul>
<p><strong>v1.2 (23 June 1998)</strong> </p>
<ul>
	<li>Class now supports the new Taskbar Creation Notification message which comes 
	with IE 4. This allows the tray icon to be recreated whenever the explorer restarts 
	(Crashes!!)</li>
</ul>
<p><strong>V1.3 (22 July 1998)</strong> </p>
<ul>
	<li>Code now compiles cleanly at warning level 4</li>
	<li>Code is now UNICODE enabled + build configurations are provided</li>
	<li>The documentation for the class has been completely revamped</li>
</ul>
<p><strong>V1.31 (27 January 1999)</strong> </p>
<ul>
	<li>Code now correctly loads up 16*16 icons, previously it allowed Windows to 
	rescale the icon from 32*32 resulting in slightly blurry images. This has been 
	accomplished via the new LoadIconResource method.</li>
</ul>
<p><strong>V1.32 (28 January 1999)</strong> </p>
<ul>
	<li>Removed a number of level 4 warnings which were occurring.</li>
</ul>
<p><strong>V1.33 (9 May 1999)</strong> </p>
<ul>
	<li>Fixed a problem as documented in KB article &quot;PRB: Menus for Notification 
	Icons Do Not Work Correctly&quot;, Article ID: Q135788.</li>
</ul>
<p><strong>V1.4 (16 May 1999)</strong> </p>
<ul>
	<li>Modified the sample program to ensure that 16*16 icons are used when tray 
	icon animation is not being used.</li>
	<li>Now uses the author&#39;s hookwnd class. This prevents the need to create the 
	two hidden windows namely CTrayRessurectionWnd and CTrayTimerWnd to handle icon 
	animation and tray creation messages.</li>
	<li>Sample project now compiles at warning level 4.</li>
	<li>General code tidy up and rearrangement.</li>
	<li>Added numerous ASSERT&#39;s to improve the code&#39;s robustness.</li>
	<li>Added functions to allow context menu to be customized.</li>
</ul>
<p><strong>21 May 2000</strong> </p>
<ul>
	<li>Minor update to the documentation.</li>
</ul>
<p><strong>V1.41 (1 January 2001)</strong> </p>
<ul>
	<li>Now includes copyright message in the source code and documentation.
	</li>
	<li>Fixed problem where the window does not get focus after double clicking 
	on the tray icon.</li>
	<li>Now fully supports the Windows 2000 balloon style tooltips.</li>
	<li>Fixed a off by one problem in some of the ASSERT&#39;s.</li>
	<li>Fixed problems with Unicode build configurations.</li>
	<li>Provided Win2k specific build configurations.</li>
</ul>
<p><strong>V1.42 (10 February 2001)</strong> </p>
<ul>
	<li>Now fully supports creation of 2 tray icons at the same time.</li>
</ul>
<p><strong>V1.43 (13 June 2001)</strong> </p>
<ul>
	<li>Now removes windows hook upon call to RemoveIcon.</li>
</ul>
<p><strong>V1.44 (26 August 2001)</strong> </p>
<ul>
	<li>Fixed memory leak in RemoveIcon.</li>
	<li>Fixed GPF in RemoveIcon by removing call to Unhook</li>
</ul>
<p><strong>V1.45 (28 August 2001)</strong> </p>
<ul>
	<li>Added support for direct access to the System Tray&#39;s HDC. This allows you 
	to generate an icon for the tray on the fly using GDI calls. The idea came from 
	the article by Jeff Heaton in the April issue of WDJ. Also added are overridden 
	Create methods to allow you to easily construct a dynamic tray icon given a 
	BITMAP instead of an ICON.</li>
</ul>
<p><strong>25 November 2002</strong></p>
<ul>
	<li>Added a comment to the NTray.h header file about where to get the HookWnd.h 
	file if the code compile fails.</li>
</ul>
<p><strong>V1.46 (21 March 2003)</strong></p>
<ul>
	<li>Fixed icon resource leaks in SetIcon(LPCTSTR lpIconName) and SetIcon(UINT 
	nIDResource). Thanks to Egor Pervouninski for reporting this.</li>
	<li>Fixed unhooking of the tray icon when the notification window is being closed.</li>
</ul>
<p><strong>V1.47 (31 March 2003)</strong></p>
<ul>
	<li>Now uses V1.05 of my Hookwnd class</li>
</ul>
<p><strong>V1.48 (2 April 2003)</strong></p>
<ul>
	<li>Now uses v1.06 of my Hookwnd class</li>
	<li>Fixed a bug in the sample app for this class where the hooks should have 
	been created as global instances rather than as member variables of the mainframe 
	window. This ensures that the hooks remain valid even after calling DefWindowProc 
	on the mainframe.</li>
</ul>
<p><strong>V1.49 (23 July 2004)</strong></p>
<ul>
	<li>Minor update to remove unnecessary include of &quot;resource.h&quot;</li>
</ul>
<p><strong>V1.50 (3 March 2006)</strong></p>
<ul>
	<li>Updated copyright details.</li>
	<li>Updated the documentation to use the same style as the web site.</li>
	<li>Did a spell check of the documentation. </li>
	<li>Fixed some issues when the code is compiled using /Wp64. Please note that 
	to support this the code now requires a recentish Platform SDK to be installed 
	if the code is compiled with Visual C++ 6.</li>
	<li>Replaced all calls to ZeroMemory with memset.</li>
	<li>Fixed an issue where SetBalloonDetails was not setting the cbSize parameter. 
	Thanks to Enrique Granda for reporting this issue.</li>
	<li>Added support for NIIF_USER and NIIF_NONE flags.</li>
	<li>Now includes support for NIM_NIMSETVERSION via SetVersion. In addition this 
	is now automatically set in the Create() calls if the Win2k boolean parameter 
	is set.</li>
	<li>Removed derivation from CObject as it was not really needed.</li>
	<li>Now includes support for NIM_SETFOCUS</li>
	<li>Added support for NIS_HIDDEN via the ShowIcon and HideIcon methods.</li>
	<li>Added support for NIIF_NOSOUND</li>
</ul>
<p><strong>V1.51 (27 June 2006)</strong></p>
<ul>
	<li>Code now uses new C++ style casts rather than old style C casts where necessary.</li>
	<li>The class framework now requires the Platform SDK if compiled using VC 6.
	</li>
	<li>Updated the logic of the ASSERTs which validate the various string lengths.</li>
	<li>Fixed a bug in CTrayNotifyIcon::SetFocus() where the cbSize value was not 
	being set correctly.</li>
	<li>CTrayIconHooker class now uses ATL&#39;s CWindowImpl class in preference to 
	the author&#39;s CHookWnd class. This does mean that for MFC only client projects, 
	you will need to add ATL support to your project.</li>
	<li>Optimized CTrayIconHooker constructor code.</li>
	<li>Updated code to compile cleanly using VC 2005. Thanks to &quot;Itamar&quot; for prompting 
	this update.</li>
	<li>Addition of a CTRAYNOTIFYICON_EXT_CLASS and CTRAYNOTIFYICON_EXT_API macros 
	which makes the class easier to use in an extension dll.</li>
	<li>Made CTrayNotifyIcon destructor virtual.</li>
</ul>
<p><strong>V1.52 (3 July 2006)</strong></p>
<ul>
	<li>Fixed a bug where the HideIcon functionality did not work on Windows 2000. 
	This was related to how the cbSize member of the NOTIFYICONDATA structure was 
	initialized. The code now dynamically determines the correct size to set at 
	runtime according to the instructions provided by the MSDN documentation for 
	this structure. As a result of this, all &quot;bWin2k&quot; parameters which were previously 
	exposed via CTrayNotifyIcon have now been removed as there is no need for them. 
	Thanks to Edwin Geng for reporting this important bug. Client code will still 
	need to intelligently make decisions on what is supported by the OS. For example 
	balloon tray icons are only supported on Shell v5 (nominally Windows 2000 or 
	later). CTrayNotifyIcon will ASSERT if for example calls are made to it to create 
	a balloon tray icon on operating systems with &lt; Shell v5.</li>
</ul>
<p><strong>V1.53 (5 July 2006)</strong></p>
<ul>
	<li>Fixed a bug where the menu may pop up a second time after a menu item is 
	chosen on Windows 2000. The problem was tracked down to the code in CTrayNotifyIcon::OnTrayNotification. 
	During testing of this bug, I was unable to get a workable solution using the 
	new shell messages of WM_CONTEXTMENU, NIN_KEYSELECT &amp; NIN_SELECT on Windows 
	2000 and Windows XP. This means that the code in CTrayNotifyIcon::OnTrayNotification 
	uses the old way of handling notifications (WM_RBUTTDOWN*). This does mean that 
	by default, client apps which use the CTrayNotifyIcon class will not support 
	the new keyboard and mouse semantics for tray icons (IMHO this is no big loss!). 
	Client code is of course free to handle their own notifications. If you go down 
	this route then I would advise you to thoroughly test your application on Windows 
	2000 and Windows XP as my testing has shown that there is significant differences 
	in how tray icons handle their messaging on these 2 operating systems. Thanks 
	to Edwin Geng for reporting this issue.</li>
	<li>Class now displays the menu based on the current message&#39;s screen coordinates, 
	rather than the current cursor screen coordinates.</li>
	<li>Fixed bug in sample app where if the about dialog is already up and it is 
	reactivated from the tray menu, it did not bring itself into the foreground</li>
</ul>
<p><strong>V1.54 (6 July 2006)</strong></p>
<ul>
	<li>Reverted the change made for v1.53 where the screen coordinates used to 
	show the context menu use the current message&#39;s screen coordinates. Instead 
	the pre v1.53 mechanism which uses the current cursor&#39;s screen coordinates is 
	now used. Thanks to Itamar Syn-Hershko for reporting this issue.</li>
</ul>
<p><strong>V1.55 (19 July 2006)</strong></p>
<ul>
	<li>The default menu item can now be customized via SetDefaultMenuItem and GetDefaultMenuItem. 
	Thanks to Mikhail Bykanov for suggesting this nice update.</li>
	<li>Optimized CTrayNotifyIcon constructor code</li>
</ul>
<p><strong>V1.56 (19 August 2006)</strong></p>
<ul>
	<li>Updated the code to operate independent of MFC if so desired. This requires 
	WTL which is an open source library extension for ATL to provide UI support 
	along the lines of MFC. Thanks to zhiguo zhao for providing this very nice addition.</li>
</ul>
<p><strong>V1.57 (15 September 2006)</strong></p>
<ul>
	<li>Fixed a bug where WM_DESTROY messages were not been handled correctly for 
	the top level window which the CTrayIconHooker class subclasses in order to 
	handle the tray resurrection message, the animation timers and auto destroying 
	of the icons when the top level window is destroyed. Thanks to Edward Livingston 
	for reporting this bug.</li>
	<li>Fixed a bug where the tray icons were not being recreated correctly when 
	we receive the &quot;TaskbarCreated&quot; message when Explorer is restarted. Thanks to 
	Nuno Esculcas for reporting this bug.</li>
	<li>Split the functionality of hiding versus deleting and showing versus creating 
	of the tray icon into 4 separate functions, namely Delete(), Create(), Hide() 
	and Show(). Note that Hide and Show functionality is only available on Shell 
	v5 or later.</li>
	<li>Fixed an issue with recreation of tray icons which use a dynamic icon created 
	from a bitmap (through the use of BitmapToIcon).</li>
	<li>CTrayNotifyIcon::LoadIconResource now loads up an icon as a shared icon 
	resource using LoadImage. This should avoid resource leaks using this function.</li>
</ul>
<p><strong>V1.58 (15 June 2007)</strong></p>
<ul>
	<li>Updated copyright messages.</li>
	<li>If the code detects that MFC is not included in the project, the code uses 
	the standard preprocessor define &quot;_CSTRING_NS&quot; to declare the string class to 
	use rather than explicitly using WTL::CString. Thanks to Krzysztof Suszka for 
	reporting this issue.</li>
	<li>Updated sample app to compile cleanly on VC 2005.</li>
	<li>Addition of a &quot;BOOL bShow&quot; to all the Create methods. This allows you to 
	create an icon without actually showing it. This avoids the flicker which previously 
	occurred if you created the icon and then immediately hid the icon. Thanks to 
	Krzysztof Suszka for providing this suggestion.</li>
	<li>Demo app now initially creates the first icon as hidden for demonstration 
	purposes.</li>
	<li>Added support for NIIF_LARGE_ICON. This Vista only feature allows you to 
	create a large balloon icon.</li>
	<li>Added support for NIF_REALTIME. This Vista only flag allows you to specify 
	not to bother showing the balloon if it is delayed due to the presence of an 
	existing balloon.</li>
	<li>Added support for NOTIFYICONDATA::hBalloonIcon. This Vista only feature 
	allows you to create a user specified balloon icon which is different to the 
	actual tray icon.</li>
	<li>LoadIconResource method now includes support for loading large icons and 
	has been renamed to simply LoadIcon. Also two overridden versions of this method 
	have been provided which allow the hInstance resource ID to be specified to 
	load the icon from.</li>
	<li>Reworked the internal code to CTrayNotifyIcon which detects the shell version.</li>
	<li>Updated the tray icon text in the demo app to better demonstrate the features 
	of the class.</li>
	<li>Updated the WTL sample to be consistent with the MFC sample code</li>
	<li>Updated comments in documentation about usage of the Platform SDK.</li>
</ul>
<p><strong>V1.59 (13 October 2007)</strong></p>
<ul>
	<li>Subclassing of the top level window is now not done internally by the CTrayNotifyIcon 
	class using the CTrayIconHooker class. Instead now a hidden top level window 
	is created for each tray icon you create and these look after handling the tray 
	resurrection and animated icon timer messages. This refactoring of the internals 
	of the class now also fixes a bug where an application which creates multiples 
	tray icons would only get one icon recreated when the tray resurrection message 
	was received. Thanks to Steven Dwyer for prompting this update. </li>
	<li>Updated the MFC sample app to correctly initialize ATL for VC 6</li>
</ul>
<p><strong>V1.60 (12 March 2008)</strong></p>
<ul>
	<li>Updated copyright details</li>
	<li>Fixed a bug in SetBalloonDetails where the code did not set the flag NIF_ICON 
	if a user defined icon was being set. Thanks to &quot;arni&quot; for reporting this bug.
	</li>
	<li>Updated the sample app to clean compile on VC 2008</li>
</ul>
<p><strong>V1.61 (22 June 2008)</strong></p>
<ul>
	<li>Code now compiles cleanly using Code Analysis (/analyze)</li>
	<li>Updated code to compile correctly using _ATL_CSTRING_EXPLICIT_CONSTRUCTORS 
	define</li>
	<li>Removed VC 6 style AppWizard comments from the code.</li>
	<li>The code now only supports VC 2005 or later. </li>
</ul>
<p><strong>V1.62 (10 April 2010)</strong></p>
<ul>
	<li>Updated copyright details.</li>
	<li>Updated the project settings to more modern default values.</li>
	<li>Updated the WTL version of LoadIcon to use the more modern ModuleHelper 
	class from WTL to get the resource instance. Thanks to &quot;Yarp&quot; for reporting 
	this issue.</li>
	<li>The class now has support for the Windows 7 &quot;NIIF_RESPECT_QUIET_TIME&quot; flag. 
	This value can be set via the new &quot;bQuietTime&quot; parameter to the Create method.</li>
	<li>Updated the code which does version detection of the Shell version</li>
</ul>
<p><strong>V1.63 (10 July 2010)</strong></p>
<ul>
	<li>Updated the sample app to compile cleanly on VS 2010. </li>
	<li>Fixed a bug in CTrayNotifyIcon::Delete where the code would ASSERT if 
	the tray notify icon was never actually created. Thanks to &quot;trophim&quot; for 
	reporting this bug. </li>
</ul>
<p><strong>V1.64 (6 November 2010)</strong></p>
<ul>
	<li>Minor update to code in SetTooltipText to code which handles 
	unreferenced variable compiler warning </li>
	<li>Implemented a GetTooltipMaxSize method which reports the maximum 
	size which the tooltip can be for a tray icon. Thanks to Geert van Horrik 
	for this nice addition </li>
	<li>All places which copy text to the underlying NOTIFYICONDATA now 
	use the _TRUNCATE parameter in their call to the Safe CRT runtime. This 
	change in behaviour means that client apps will no longer crash if they 
	supply data larger than this Windows structure can accommodate. Thanks to 
	Geert van Horrik for prompting this update. </li>
	<li>All calls to sizeof(struct)/sizeof(first element) have been 
	replaced with _countof </li>
	<li>Fixed a linker error when compiling the WTL sample app in release 
	mode. </li>
</ul>
<p><strong>V1.65 (26 November 2010)</strong></p>
<ul>
	<li>Minor update to use DBG_UNREFERENCED_LOCAL_VARIABLE macro. Thanks to 
	Jukka Ojanen for prompting this update.</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="crt"><a name="APIReference"></a><strong>API Reference</strong></p>
<p>Instantiate a CTrayNotifyIcon where it will be around for the lifetime of your 
icon. The sample program does this in the mainframe as the icon will be available 
for the lifetime of the application. In the sample program this is done in the mainframe 
class. The API consists of the following public functions of the class CTrayNotifyIcon</p>
<p>&nbsp;</p>
<p><strong><a href="#CTrayNotifyIcon">CTrayNotifyIcon::CTrayNotifyIcon</a><br>
<a href="#~CTrayNotifyIcon">CTrayNotifyIcon::~CTrayNotifyIcon</a><br>
<a href="#Create">CTrayNotifyIcon::Create</a><br><a href="#SetTooltipText">CTrayNotifyIcon::SetTooltipText</a><br>
<a href="#GetTooltipText">CTrayNotifyIcon::GetTooltipText</a><br>
<a href="#SetIcon">CTrayNotifyIcon::SetIcon</a><br><a href="#SetStandardIcon">CTrayNotifyIcon::SetStandardIcon</a><br>
<a href="#GetIcon">CTrayNotifyIcon::GetIcon</a><br><a href="#UsingAnimatedIcon">
CTrayNotifyIcon::UsingAnimatedIcon</a><br><a href="#SetNotificationWnd">CTrayNotifyIcon::SetNotificationWnd</a><br>
<a href="#GetNotificationWnd">CTrayNotifyIcon::GetNotificationWnd</a><br>
<a href="#Hide">CTrayNotifyIcon::Hide</a><br><a href="#Show">CTrayNotifyIcon::Show</a><br>
<a href="#Delete">CTrayNotifyIcon::Delete</a><br><a href="#SetMenu">CTrayNotifyIcon::SetMenu</a><br>
<a href="#GetMenu">CTrayNotifyIcon::GetMenu</a><br>
<a href="#OnTrayNotification">CTrayNotifyIcon::OnTrayNotification</a><br>
<a href="#IsShowing">CTrayNotifyIcon::IsShowing</a><br><a href="#IsHidden">CTrayNotifyIcon::IsHidden</a><br>
<a href="#LoadIconResource">CTrayNotifyIcon::LoadIconResource</a></strong><br>
<b><a href="#SetBalloonDetails">CTrayNotifyIcon::SetBalloonDetails</a><br>
<a href="#GetBalloonText">CTrayNotifyIcon::GetBalloonText</a><br>
<a href="#GetBalloonCaption">CTrayNotifyIcon::GetBalloonCaption</a><br>
<a href="#GetBalloonStyle">CTrayNotifyIcon::GetBalloonStyle</a><br>
<a href="#GetBalloonTimeout">CTrayNotifyIcon::GetBalloonTimeout<br></a></b><b>
<a href="#BitmapToIcon">CTrayNotifiyIcon::BitmapToIcon</a><br>
<a href="#GetDynamicDCAndBitmap">CTrayNotifiyIcon::GetDynamicDCAndBitmap</a></b></p>
<p>&nbsp;</p>
<p></p>
<p><a name="CTrayNotifyIcon"></a><strong>CTrayNotifyIcon::CTrayNotifyIcon</strong></p>
<p><strong>CTrayNotifyIcon::CTrayNotifyIcon();</strong></p>
<p><strong>Remarks</strong></p>
<p>Standard constructor, just initialises all member variables to safe values.</p>
<p>&nbsp;</p>
<p><a name="~CTrayNotifyIcon"></a><strong>CTrayNotifyIcon::~CTrayNotifyIcon</strong></p>
<p><strong>CTrayNotifyIcon::~CTrayNotifyIcon();</strong></p>
<p><strong>Remarks</strong></p>
<p>Standard destructor. Internally this will call RemoveIcon to remove the icon 
from the UI.</p>
<p>&nbsp;</p>
<p><a name="Create"></a><strong>CTrayNotifyIcon::Create</strong></p>
<p><strong>BOOL CTrayNotifyIcon::Create(CWnd* </strong><i>pNotifyWnd</i><strong>, 
UINT </strong><i>nID</i><strong>, LPCTSTR </strong><i>pszTooltipText</i><strong>, 
HICON </strong><i>hIcon</i><strong>, UINT </strong><i>nNotifyMessage</i><strong>, 
UINT </strong><i>uMenuID</i><strong> = 0, BOOL </strong><i>bShow<strong> =
</strong> </i>
<strong>TRUE);</strong></p>
<p><strong>BOOL CTrayNotifyIcon::Create(CWnd* </strong><i>pNotifyWnd</i><strong>, 
UINT </strong><i>uID</i><strong>, LPCTSTR </strong><i>pszTooltipText</i><strong>, 
HICON* </strong><i>phIcons</i><strong>, int </strong><i>nNumIcons</i><strong>, DWORD
</strong><i>dwDelay</i><strong>, UINT </strong><i>nNotifyMessage</i><strong>, UINT
</strong><i>uMenuID</i><strong> = 0, BOOL </strong><i>bShow<strong> =
</strong> </i>
<strong>TRUE);</strong></p>
<p><b>BOOL CTrayNotifyIcon::Create(CWnd* </b><i>pNotifyWnd</i><b>, UINT </b><i>uID</i><b>, 
LPCTSTR </b><i>pszTooltipText</i><b>, CBitmap* </b><i>pBitmap</i><b>, UINT </b>
<i>nNotifyMessage</i><b>, UINT </b><i>uMenuID</i><b> = 0</b><strong>, BOOL
</strong><i>bShow <strong>= </strong> </i><strong>TRUE</strong><b>);</b></p>
<p><b>BOOL </b><strong>CTrayNotifyIcon::</strong><b>Create(CWnd* </b><i>pNotifyWnd</i><b>, 
UINT </b><i>uID</i><b>, LPCTSTR </b><i>pszTooltipText</i><b>, LPCTSTR </b><i>pszBalloonText</i><b>, 
LPCTSTR </b><i>pszBalloonCaption</i><b>, UINT </b><i>nTimeout</i><b>, BalloonStyle
</b><i>style</i><b>, HICON </b><i>hIcon</i><b>, UINT </b><i>nNotifyMessage, </i>
<strong>UINT </strong><i>uMenuID</i><strong> = 0, BOOL </strong><strong><i>bNoSound</i> 
= <b>FALSE</b></strong><b>, BOOL </b><i>bLargeIcon = </i><b>FALSE, BOOL </b><i>bRealtime 
= </i><b>FALSE, HICON </b><i>hBalloonIcon = </i><b>NULL, <strong>BOOL </strong> </b>
<i>bQuiet<b><strong>
= </strong> </b> </i><b> <strong>FALSE, </strong>BOOL </b><i>bShow = </i><b>TRUE); </b>
</p>
<p><b>BOOL </b><strong>CTrayNotifyIcon::</strong><b>Create(CWnd* </b><i>pNotifyWnd</i><b>, 
UINT </b><i>uID</i><b>, LPCTSTR </b><i>pszTooltipText</i><b>, LPCTSTR </b><i>pszBalloonText</i><b>, 
LPCTSTR </b><i>pszBalloonCaption</i><b>, UINT </b><i>nTimeout</i><b>, BalloonStyle
</b><i>style</i><b>, HICON* </b><i>phIcons</i><b>, int </b><i>nNumIcons</i><b>, 
DWORD </b><i>dwDelay</i><b>, UINT </b><i>nNotifyMessage, </i><strong>UINT
</strong><i>uMenuID</i><strong> = 0,</strong><strong><b> </b>BOOL </strong>
<strong><i>bNoSound</i> = <b>FALSE</b></strong><b>, BOOL </b><i>bLargeIcon = </i>
<b>FALSE, BOOL </b><i>bRealtime = </i><b>FALSE, HICON </b><i>hBalloonIcon = </i>
<b>NULL, <strong>BOOL </strong> </b>
<i>bQuiet<b><strong> = </strong> </b>
</i>
<b> <strong>FALSE, </strong>BOOL </b>
<i>bShow = </i><b>TRUE);</b></p>
<p><b>BOOL CTrayNotifyIcon::Create(CWnd* </b><i>pNotifyWnd</i><b>, UINT </b><i>uID</i><b>, 
LPCTSTR </b><i>pszTooltipText</i><b>, LPCTSTR </b><i>pszBalloonText</i><b>, LPCTSTR
</b><i>pszBalloonCaption</i><b>, UINT </b><i>nTimeout</i><b>, BalloonStyle </b>
<i>style</i><b>, CBitmap* </b><i>pBitmap</i><b>, UINT </b><i>nNotifyMessage</i><b>, 
UINT </b><i>uMenuID</i><b> = 0</b><strong>,<b> </b>BOOL </strong><strong><i>bNoSound</i> 
= <b>FALSE</b></strong><b>, BOOL </b><i>bLargeIcon = </i><b>FALSE, BOOL </b><i>bRealtime 
= </i><b>FALSE, HICON </b><i>hBalloonIcon = </i><b>NULL, <strong>BOOL</strong></b>
<i>bQuiet<strong><b> = </b> </strong> </i> <strong><b> <strong>FALSE, </strong> </b> </strong><b>BOOL </b><i>bShow = </i><b>TRUE);</b></p>
<p><strong>Return Value</strong></p>
<p class="t">TRUE if the tray icon was successfully created otherwise FALSE.</p>
<p><strong>Parameters</strong></p>
<p><em>pNotifyWnd</em>: The window to send notification messages to. This can be 
changed later by using the SetNotificationWnd method.</p>
<p><em>uID</em>: An application defined value to associate with each tray icon. 
This allows you to display multiple icons from one app. CTrayNotifyIcon also overrides 
its meaning such that it is used as the menu resource id for the context menu.</p>
<p><em>pszTooltipText</em>: Initial tooltip text to display. This can be changed 
later using the SetTooltipText method.</p>
<p><em>hIcon</em>: The icon to display. This can be changed later using the SetIcon 
method.</p>
<p><em>nNotifyMessage</em>: This is the notification message to use to inform the 
window about mouse messages. This should be defined as some WM_USER message and 
handled in the notification windows message map using the ON_MESSAGE macro. To see 
how to hook this up have a look at the mainfrm.cpp</p>
<p><em>phIcons</em>: pointer to an array of icon handles to use to do the icon animation.</p>
<p><em>nNumIcons</em>: The number of icons phIcons points to.</p>
<p><em>dwDelay</em>: interval in milliseconds between icon animation frames.</p>
<p><i>pszBalloonText:</i> The text to appear in the balloon style tooltip</p>
<p><i>pszBalloonCaption</i><i>:</i> The caption for the balloon style tooltip</p>
<p><i>nTimeout:</i> The timeout associated with the balloon style tooltip. After 
this time (in milliseconds) the balloon tooltip will disappear.</p>
<p><i>style:</i> The icon to appear in the balloon tooltip. It can be one of the 
enum values CTrayNotifyIcon::Info, CTrayNotifyIcon::Error, CTrayNotifyIcon::Warning, 
CTrayNotifyIcon::None or CTrayNotifyIcon::User. Please note that CTrayNotifyIcon::User 
is only available on XP SP2 or later. Also note that Balloon style tooltips themselves 
are only available on version 5 of the shell or later (Windows 2000 or later).</p>
<p><i>uMenuID</i> Set this value to a non-zero value to use a different menu resource 
instead of the default one as specified by uID</p>
<p><i>pBitmap</i> The bitmap to display as the icon. Internally the code converts 
the bitmap to an icon prior to displaying it.</p>
<p><i>bNoSound</i> Setting this value to TRUE (the default is FALSE) will cause 
the shell not to play the popup sound when the balloon style tooltip is shown. Please 
note that this functionality is only available on XP SP2 or later.</p>
<p>bShow Should the icon be shown initially, if set to FALSE, then the icon is created 
hidden. Please note that this functionality is only available on Windows 2000 or 
later.</p>
<p><i>bLargeIcon </i>Corresponds to the NIIF_LARGE_ICON flag which creates the balloon 
with a large icon. Please note that this functionality is only available on Windows 
Vista or later.</p>
<p><i>bRealtime </i>Corresponds to the NIF_REALTIME flag. This allows you to specify 
not to bother showing the balloon if it is delayed due to the presence of an existing 
balloon. Please note that this functionality is only available on Windows Vista 
or later.</p>
<p><i>hBalloonIcon </i>Corresponds to the NOTIFYICONDATA::hBalloonIcon variable. 
This allows you to create a user specified balloon icon which is different to the 
actual tray icon. Please note that this functionality is only available on Windows 
Vista or later.</p>
<p><em>bQuite</em> Corresponds to the NIIF_RESPECT_QUIET_TIME flag which tells the 
API to respect the &quot;Quiet&quot; mode setting of the OS as silently not show the icon 
if necessary. This is used by Windows 7 to reduce the clutter of tray notification 
icons during the initial Out of Box experience. Please note that this functionality 
is only available on Windows 7 or later.</p>
<p><strong>Remarks</strong></p>
<p>Creates a tray notification icon. The 2 overridden versions which specify balloon 
tooltips are only available on Shell v5 (nominally Windows 2000 and later).</p>
<p>&nbsp;</p>
<p><a name="SetTooltipText"></a><strong>CTrayNotifyIcon::SetTooltipText</strong></p>
<p><strong>BOOL CTrayNotifyIcon::SetTooltipText(LPCTSTR </strong><i>pszTooltipText</i><strong>);</strong></p>
<p><strong>BOOL CTrayNotifyIcon::SetTooltipText(UINT </strong><i>nID</i><strong>);</strong></p>
<p><strong>Return Value</strong></p>
<p>TRUE if the tooltip text was changed successfully otherwise FALSE</p>
<p><strong>Parameters</strong></p>
<p><em>pszTooltipText</em> The text to set</p>
<p><em>nID</em> A windows string resource ID of the text to set</p>
<p><strong>Remarks</strong></p>
<p>Sets the tooltip text associated with the tray icon</p>
<p>&nbsp;</p>
<p><a name="GetTooltipText"></a><strong>CTrayNotifyIcon::GetTooltipText</strong></p>
<p><strong>CString CTrayNotifyIcon::GetTooltipText() const</strong></p>
<p><strong>Return Value</strong></p>
<p>The current tooltip text </p>
<p>&nbsp;</p>
<p><a name="SetIcon"></a><strong>CTrayNotifyIcon::SetIcon</strong></p>
<p><strong>BOOL SetIcon(HICON </strong><i>hIcon</i><strong>);</strong></p>
<p><strong>BOOL SetIcon(CBitmap* </strong><i>pBitmap</i><strong>);</strong></p>
<p><strong>BOOL SetIcon(LPCTSTR </strong><i>lpIconName</i><strong>);</strong></p>
<p><strong>BOOL SetIcon(UINT </strong><i>nIDResource</i><strong>);</strong></p>
<p><strong>BOOL SetIcon(HICON* </strong><i>phIcons</i><strong>, int </strong><i>
nNumIcons</i><strong>, DWORD </strong><i>dwDelay</i><strong>);</strong></p>
<p><strong>Return Value</strong></p>
<p>TRUE if the icon was changed successfully otherwise FALSE</p>
<p><strong>Parameters</strong></p>
<p><em>hIcon</em> handle to the icon to set</p>
<p><em>lpIconName</em> a Windows Icon resource string of the icon to use</p>
<p><em>nIDResource</em> a Windows Icon resource ID of the icon to use</p>
<p><em>phIcons</em>: pointer to an array of icon handles to use to do the icon animation.</p>
<p><em>nNumIcons</em>: The number of icons phIcons points to.</p>
<p><em>dwDelay</em>: interval in milliseconds between icon animation frames.</p>
<p><em>pBitmap</em> The bitmap to use as the icon</p>
<p><strong>Remarks</strong></p>
<p>Sets the icon associated with the tray icon. Normally you should use
<a href="#LoadIconResource">LoadIconResource</a> to load up your icons.</p>
<p>&nbsp;</p>
<p><a name="SetStandardIcon"></a><strong>CTrayNotifyIcon::SetStandardIcon</strong></p>
<p><strong>BOOL CTrayNotifyIcon::SetStandardIcon(LPCTSTR </strong><i>lpIconName</i><strong>);</strong></p>
<p><strong>BOOL CTrayNotifyIcon::SetStandardIcon(UINT </strong><i>nIDResource</i><strong>);</strong></p>
<p><strong>Parameters</strong></p>
<p><em>lpIconName</em> a Windows Icon resource string of the icon to use</p>
<p><em>nIDResource</em> a Windows Icon resource ID of the icon to use</p>
<p><strong>Remarks</strong></p>
<p>Sets the icon associated with the tray icon using one of the standard system 
icon identifiers. </p>
<p>&nbsp;</p>
<p><a name="GetIcon"></a><strong>CTrayNotifyIcon::GetIcon</strong></p>
<p><strong>HICON CTrayNotifyIcon::GetIcon() const;</strong></p>
<p><strong>Return Value</strong></p>
<p>Icon handle of the icon currently being displayed</p>
<p>&nbsp;</p>
<p><a name="UsingAnimatedIcon"></a><strong>CTrayNotifyIcon::UsingAnimatedIcon</strong></p>
<p><strong>BOOL UsingAnimatedIcon() const;</strong></p>
<p><strong>Return Value</strong></p>
<p>TRUE if an animated icon is being show, FALSE if an ordinary static icon is being 
used.</p>
<p>&nbsp;</p>
<p><a name="SetNotificationWnd"></a><strong>CTrayNotifyIcon::SetNotificationWnd</strong></p>
<p><strong>BOOL CTrayNotifyIcon::SetNotificationWnd(CWnd* </strong><i>pNotifyWnd</i><strong>);</strong></p>
<p><strong>Return Value</strong></p>
<p>TRUE if the notification window was successfully set otherwise FALSE</p>
<p><strong>Parameters</strong></p>
<p><em>pNotifyIcon</em> The window which is to be the notification window associated 
with this tray icon</p>
<p>&nbsp;</p>
<p><a name="GetNotificationWnd"></a><strong>CTrayNotifyIcon::GetNotificationWnd</strong></p>
<p><strong>CWnd* GetNotificationWnd() const;</strong></p>
<p><strong>Return Value</strong></p>
<p>The window which is the notification window associated with this tray icon</p>
<p>&nbsp;</p>
<p><a name="Hide"></a><strong>CTrayNotifyIcon::Hide</strong></p>
<p><strong>void CTrayNotifyIcon::Hide();</strong></p>
<p><strong>Remarks</strong></p>
<p>Temporarily hides the tray notify icon. Note this function is only supported 
on Shell v5 or later (nominally Windows 2000 or later). Internally this method will 
use the NIS_HIDDEN functionality to hide the icon </p>
<p>&nbsp;</p>
<p><a name="Show"></a><strong>CTrayNotifyIcon::Show</strong></p>
<p><strong>void CTrayNotifyIcon::Show();</strong></p>
<p><strong>Remarks</strong></p>
<p>The corollary function to Hide</p>
<p>&nbsp;</p>
<p><a name="Delete"></a><strong>CTrayNotifyIcon::Delete</strong></p>
<p><strong>void CTrayNotifyIcon::Delete(BOOL </strong><strong><i>bCloseHelperWindow 
= </i></strong><strong>TRUE);</strong></p>
<p><strong>Parameters</strong></p>
<p><em>bCloseHelperWindow</em> if set, then the internal window which the CTrayNotifyIcon 
class creates to handle animation timers and the tray resurrection messages is destroyed. 
You would normally leave this as TRUE so that you can create a fresh tray icon via 
the <a href="#Create">Create</a> methods.</p>
<p><strong>Remarks</strong></p>
<p>Removes the tray icon entirely and resets the class member variables. This is 
the corollary function of <a href="#Create">CTrayNotifyIcon::Create</a></p>
<p>&nbsp;</p>
<p><a name="SetMenu"></a><strong>CTrayNotifyIcon::SetMenu</strong></p>
<p><strong>void CTrayNotifyIcon::SetMenu(HMENU </strong><i>hMenu</i><strong>);</strong></p>
<p><strong>Parameters</strong></p>
<p><em>hMenu</em> The menu resource to use as the context menu for the tray icon.</p>
<p>&nbsp;</p>
<p><a name="GetMenu"></a><strong>CTrayNotifyIcon::GetMenu</strong></p>
<p><strong>CMenu&amp; CTrayNotifyIcon::GetMenu();</strong></p>
<p><strong>Return Value</strong></p>
<p>menu resource currently associated with the tray icon.</p>
<p>&nbsp;</p>
<p><a name="OnTrayNotification"></a><strong>CTrayNotifyIcon::OnTrayNotification</strong></p>
<p><strong>virtual LRESULT </strong>CTrayNotifyIcon::<strong>OnTrayNotification(WPARAM
</strong><i>wParam</i><strong>, LPARAM </strong><i>lParam</i><strong>);</strong></p>
<p><strong>Return Value</strong></p>
<p>Standard result to return from the message handler</p>
<p><strong>Parameters</strong></p>
<p><i>wParam:</i> the WPARAM details for the notification.</p>
<p><i>lParam:</i> the LPARAM details for the notification.</p>
<p><strong>Remarks</strong></p>
<p>When your handler gets control, you are free to do whatever you like when you 
get the notification. The provided sample app does nothing and delegates all the 
work to the default implementation in CTrayNotifyIcon This virtual (so you can override 
it) function implements the double click and standard context menu support.</p>
<p>&nbsp;</p>
<p><a name="IsShowing"></a><strong>CTrayNotifyIcon::IsShowing</strong></p>
<p><strong>BOOL CTrayNotifyIcon::IsShowing() const;</strong></p>
<p><strong>Return Value</strong></p>
<p>TRUE if the tray icon is currently been shown else FALSE</p>
<p>&nbsp;</p>
<p><a name="IsHidden"></a><strong>CTrayNotifyIcon::IsHidden</strong></p>
<p><strong>BOOL CTrayNotifyIcon::IsHidden();</strong></p>
<p><strong>Return Value</strong></p>
<p>TRUE if the tray icon is currently hidden else FALSE</p>
<p>&nbsp;</p>
<p><a name="LoadIconResource"></a><strong>CTrayNotifyIcon::LoadIcon</strong></p>
<p><b>static HICON LoadIcon(LPCTSTR </b><i>lpIconName</i><b>, BOOL </b><i>bLargeIcon 
= </i><b>FALSE);</b></p>
<p><b>static HICON LoadIcon(UINT </b><i>nIDResource</i><b>, BOOL </b><i>bLargeIcon
</i><b>= FALSE);</b></p>
<p><b>static HICON LoadIcon(HINSTANCE </b><i>hInstance</i><b>, LPCTSTR </b><i>lpIconName</i><b>, 
BOOL </b><i>bLargeIcon</i><b> = FALSE);</b></p>
<p><b>static HICON LoadIcon(HINSTANCE </b><i>hInstance</i><b>, UINT </b><i>nIDResource</i><b>, 
BOOL </b><i>bLargeIcon</i><b> = FALSE);</b></p>
<p><strong>Parameters</strong></p>
<p><em>lpIconName</em> a Windows Icon resource string of the icon to load</p>
<p><em>nIDResource</em> a Windows Icon resource ID of the icon to load</p>
<p><i>hInstance</i> The instance handle to load the resource from.</p>
<p>bLargeIcon If you are loading an icon to be used as a large icon for the balloon 
window on Vista, then set this to true to load the large version of the icon (normally 
32*32)</p>
<p><strong>Return Value</strong></p>
<p>An icon handle if the icon could be loaded otherwise NULL.</p>
<p><strong>Remarks</strong></p>
<p>You should call this function in preference to the MFC CWinApp::LoadIcon or SDK 
LoadIcon call to load up your icons for use by CTrayNotifyIcon. This function will 
first attempt to load a 16*16 size (or 32*32 if you specify bLargeIcon = TRUE) icon.</p>
<p>&nbsp;</p>
<p><a name="SetBalloonDetails"></a><strong>CTrayNotifyIcon::SetBalloonDetails</strong></p>
<p><b>BOOL CTrayNotifyIcon::SetBalloonDetails(LPCTSTR </b><i>pszBalloonText</i><b>, 
LPCTSTR </b><i>pszBalloonCaption</i><b>, BalloonStyle </b><i>style</i><b>, UINT
</b><i>nTimeout, </i><b>HICON </b><i>hUserIcon</i><b>=NULL,</b><i> </i><b>BOOL
</b><i>bNoSound</i><b>=FALSE, BOOL </b><i>bLargeIcon = </i><b>FALSE, BOOL </b>
<i>bRealtime = </i><b>FALSE, HICON </b><i>hBalloonIcon = </i><b>NULL);</b></p>
<p><strong>Return Value</strong></p>
<p>TRUE if the details were updated successfully otherwise FALSE</p>
<p><strong>Parameters</strong></p>
<p><i>pszBalloonText</i> The text to appear in the balloon style tooltip.</p>
<p><i>pszBalloonCaption</i> The caption for the balloon style tooltip.</p>
<p>nTimeout The timeout associated with the balloon style tooltip. After this time 
(in milliseconds) the balloon tooltip will disappear.</p>
<p><i>style</i> The icon to appear in the balloon tooltip. Please see
<a href="#Create">CTrayNotifyIcon::Create</a> for more details on the possible values.</p>
<p>hUserIcon If you set &quot;style&quot; to User, then this parameter is where you specify 
the user icon to display in the balloon style tooltip.</p>
<p><i>bNoSound</i> Setting this value to TRUE (the default is FALSE) will cause 
the shell not to play the popup sound when the balloon style tooltip is shown. Please 
note that this functionality is only available on XP SP2 or later.</p>
<p><i>bLargeIcon </i>Corresponds to the NIIF_LARGE_ICON flag which creates the balloon 
with a large icon. Please note that this functionality is only available on Windows 
Vista or later.</p>
<p><i>bRealtime </i>Corresponds to the NIF_REALTIME flag. This allows you to specify 
not to bother showing the balloon if it is delayed due to the presence of an existing 
balloon. Please note that this functionality is only available on Windows Vista 
or later.</p>
<p><i>hBalloonIcon </i>Corresponds to the NOTIFYICONDATA::hBalloonIcon variable. 
This allows you to create a user specified balloon icon which is different to the 
actual tray icon. Please note that this functionality is only available on Windows 
Vista or later.</p>
<p><strong>Remarks</strong></p>
<p>Sets the balloon tooltip details associated with the tray icon</p>
<p>&nbsp;</p>
<p><a name="GetBalloonText"></a><strong>CTrayNotifyIcon::GetBalloonText</strong></p>
<p><strong>CString CTrayNotifyIcon::GetBalloonText() const</strong></p>
<p><strong>Return Value</strong></p>
<p>The current balloon text </p>
<p>&nbsp;</p>
<p><a name="GetBalloonCaption"></a><strong>CTrayNotifyIcon::GetBalloonCaption</strong></p>
<p><strong>CString CTrayNotifyIcon::GetBalloonCaption() const</strong></p>
<p><strong>Return Value</strong></p>
<p>The current balloon caption</p>
<p>&nbsp;</p>
<p><a name="GetBalloonStyle"></a><strong>CTrayNotifyIcon::GetBalloonStyle</strong></p>
<p><strong>CTrayNotifiyIcon::BalloonStyle CTrayNotifyIcon::GetBalloonStyle() const</strong></p>
<p><strong>Return Value</strong></p>
<p>The current style balloon tooltip being used</p>
<p>&nbsp;</p>
<p><a name="GetBalloonTimeout"></a><strong>CTrayNotifyIcon::GetBalloonTimeout</strong></p>
<p><strong>UINT CTrayNotifyIcon::GetBalloonTimeout() const</strong></p>
<p><strong>Return Value</strong></p>
<p>The current timeout (in milliseconds) associated with the balloon tooltip being 
used</p>
<p>&nbsp;</p>
<p><strong><a name="BitmapToIcon"></a>CTrayNotifyIcon::BitmapToIcon</strong></p>
<p><strong>HICON CTrayNotifyIcon::BitmapToIcon(CBitmap* </strong><i>pBitmap</i><strong>)</strong></p>
<p><strong>Return Value</strong></p>
<p>An ICON representation of the specified bitmap</p>
<p><strong>Parameters</strong></p>
<p><i>pBitmap:</i> The bitmap to convert to an icon</p>
<p><strong>Remarks</strong></p>
<p>Converts a windows bitmap to a icon. This method is used by the Create method 
when called with a CBitmap instead of a HICON.</p>
<p>&nbsp;</p>
<p><strong><a name="GetDynamicDCAndBitmap"></a>CTrayNotifyIcon::GetDynamicDCAndBitmap</strong></p>
<p><strong>static BOOL CTrayNotifyIcon::GetDynamicDCAndBitmap(CDC* </strong><i>pDC</i><strong>, 
CBitmap* </strong><i>pBitmap</i><strong>)</strong></p>
<p><strong>Return Value</strong></p>
<p>TRUE if the DC and bitmap were obtained ok otherwise FALSE</p>
<p><strong>Parameters</strong></p>
<p><i>pDC:</i> The address of a DC class to be returned with a DC compatible with 
the tray.</p>
<p><i>pBitmap:</i> The address of a bitmap which will contain the tray icon representation.</p>
<p><strong>Remarks</strong></p>
<p>This function should be called in preparation for using dynamic tray icons (i.e. 
where you construct the ICON at runtime by drawing into a memory device context.). 
Upon a successful return you should hang on to these two parameters until you need 
them. For example in the sample app, the code periodically updates the DC by drawing 
a new number into the DC and then updating the tray icon with this. For more info 
on using dynamic tray icons, please consult the supplied sample application. </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a name="Contact"></a><strong>CONTACTING THE AUTHOR</strong></p>
<p>PJ Naughter<br>Email: <a href="mailto:pjna@naughter.com">pjna@naughter.com</a><br>
Web: <a href="http://www.naughter.com">http://www.naughter.com</a><br>26 November 2010</p>

</body>

</html>

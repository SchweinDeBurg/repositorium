<html>

<head>
<title>CToasterWnd v1.16</title>
<link rel="stylesheet" type="text/css" href="./naughter.css">
</head>

<body>

<h2 align="left"><strong>CToasterWnd v1.16</strong></h2>

<p>Welcome to <strong>CToasterWnd</strong>, a freeware MFC class
which provides a UI control similar to the MSN Messenger style notification window         aka a "Toast" window, since it pops up!.
It is based in part on a C# implementation of a similar type window by Robert Misiak on Codeproject
(<a href="http://www.codeproject.com/cs/miscctrl/RobMisNotifyWindow.asp">http://www.codeproject.com/cs/miscctrl/RobMisNotifyWindow.asp</a>)</p>

<p></p>

<p>
<img border="0" src="ToasterWnd.jpg" width="506" height="402" alt="CToasterWnd example"></p>

<p>&nbsp;</p>

<table>
  <tr>
    <td><a href="#Features">Features</a></td>
  </tr>
  <tr>
    <td><a href="#Copyright">Copyright</a></td>
  </tr>
  <tr>
    <td><a href="#Usage">Usage</a></td>
  </tr>
  <tr>
    <td><a href="#History">History</a></td>
  </tr>
  <tr>
    <td><a href="#Enhancements">Planned Enhancements</a></td>
  </tr>
  <tr>
    <td><a href="#Contact">Contacting the Author</a></td>
  </tr>
</table>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="Features"></a><strong>Features</strong>


</h2>


<ul>
  <li>Standard MFC class, which
    derives from CFrameWnd.</li>
  <li>Provides for title text, body
    text and an icon in the toast window (CToasterWnd::m_sTitle, CToasterWnd::m_sText,
    CToasterWnd::m_TitleIcon).&nbsp;</li>
  <li>A close button is provided
    which takes advantage of XP Themes if running on XP while maintaining support
    for all Win32 OS'es back to Windows 95. (CToasterWnd::m_bUseThemingForCloseButton).</li>
  <li>Fonts used for the title and
    body text are customizable (CToasterWnd::m_fontTitle and CToasterWnd::m_fontText).</li>
  <li>Colors for the title text and
    body text are customizable (CToasterWnd::m_colorTitle and
    CToasterWnd::m_colorText).</li>
  <li>The layout of the title text
    and body text are customizable (CToasterWnd::m_dwTitleStyle and CToasterWnd::m_dwTextStyle).
    This allows the text to be aligned, centred, ellipsis replacement etc.</li>
  <li>The background color of the
    window is customizable (CToasterWnd::m_colorBackground).</li>
  <li>The control supports
    horizontal, vertical, and diagonal background styles,&nbsp;in addition to
    a plain solid background. This is achieved using the GDI function
    GradientFill. On Windows 95, where GradientFill is not available, the code
    fall backs to supporting a plain solid background. (CToasterWnd::m_colorGradient
    and CToasterWnd::m_BackgroundStyle).</li>
  <li>The time, which the window
    stays visible before it closes, is customizable. (CToasterWnd::m_dwWaitTime).</li>
  <li>The size of the window is
    customizable (CToasterWnd::m_nHeight and CToasterWnd::m_nWidth).</li>
  <li>Whether the window stays
    visible when the mouse stays over the control is customizable.
    (CToasterWnd::m_bWaitOnMouseOver).</li>
  <li>The control supports 4
    different types of animations when opening and closing. These are popping up,
    popping down, popping to the left and popping to the right. (CToasterWnd::m_AnimationStyle).</li>
  <li>The control supports
    customizable the position where the window is show. This includes the 4
    corners of the primary display. In addition it supports a mode whereby it
    detects the most appropriate location based on the position of the taskbar.
    (CToasterWnd::m_PopupPosition).</li>
  <li>The animation type also
    supports a mode whereby it detects the most appropriate type based on the
    position of the taskbar.</li>
  <li>The control supports spacing
    from the edge of the screen work area, which is used to calculate the
    popup position (CToasterWnd::m_nCXAreaEdge and m_nCYAreaEdge).</li>
  <li>Notifications for various
    events can be delivered to an external class (CToasterWnd::m_pNotifier).&nbsp;The
    sample program uses this to do a simple message beep when the popup is
    shown.</li>
  <li>The icon, title and body text
    can be clickable. When the mouse moves over these hot areas a hand cursor is
    shown.</li>
  <li>The window optionally supports
    a transparency animation effect if on Windows 2000 or later (CToasterWnd::m_bTransparent).</li>
  <li>The classes are fully Unicode compliant and
    include Unicode built options in the workspace file.</li>
  <li>A sample program is included which exercises most of the functionality.</li>
  <li>Since the class is a standard
    MFC class, you can derive you own class from it to customize its drawing and/or behaviour. In addition
    the code is modular and provides numerous
    virtual functions for customization. For example it would not be much work
    to extend the class to support stacking of multiple toast windows.</li>
	<li>Optionally supports HTML in the window via the QHTM HTML control 
	provided at <a href="http://www.gipsysoft.com/qhtm/">
	http://www.gipsysoft.com/qhtm/</a> (CToasterWnd::m_bHTML) or via the 
	HTMLayout control provided at
	<a href="http://www.terrainformatica.com/htmlayout/">
	http://www.terrainformatica.com/htmlayout/</a>.</li>
	<li>Supports including an alpha blended image in the client area of the 
	control (CToasterWnd::m_Logo, m_rectLogoSrc, m_rectLogoDest &amp; 
	m_nLogoSrcAlpha).</li>
</ul>

<p></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><b><a name="Copyright"></a>Copyright</b></h2>
<ul>
  <li>You are allowed to include the source code in any product
(commercial, shareware, freeware or otherwise) when your product is released in
binary form.&nbsp;</li>
  <li> You are allowed to modify the source code in any way you want
except you cannot modify the copyright details at the top of each module.&nbsp;</li>
  <li> If you
want to distribute source code with your application, then you are only allowed
to distribute versions released by the author. This is to maintain a single
distribution point for the source code.&nbsp;</li>
</ul>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="Usage"></a><strong>Usage</strong>

</h2>

<ul>
  <li>To use the class in your code simply include
    ToasterWnd.cpp/h in your project and #include ToasterWnd.h in which ever of your modules needs to make
    calls to the class. Since the class is derived from the MFC class CFrameWnd,
    you should create an instance on the heap and not the stack.</li>
  <li>Then set some of the public member
    variable properties in the class to suit your requirements and when you are happy with the settings
    simple call CToasterWnd::Show.&nbsp;</li>
  <li>To hide the toast window
    (which will include showing the closing animation) call CToasterWnd::Hide.</li>
  <li>To completely destroy the
    control and the underlying window, call CToasterWnd::Close.</li>
  <li>Your code will need to include MFC either statically or
    dynamically in your application.</li>
	<li>As of v1.13, the classes are now designed for VC 2005 or later. 
	They will not compile on earlier releases of VC.</li>
	<li>There are two forms of support for HTML in CToasterWnd. The first method 
	provides support via the QHTM control available from
	<a href="http://www.gipsysoft.com/qhtm/">
	http://www.gipsysoft.com/qhtm/</a>. To include support for this, you need to 
	download the QHTM component and purchase a license as required, integrate it 
	into VC following the supplied instructions and then define the 
	pre-processor value &quot;CTOASTERWND_QHTM_SUPPORT&quot;. The second method provides 
	support via the HTMLayout control provided at
	<a href="http://www.terrainformatica.com/htmlayout/">
	http://www.terrainformatica.com/htmlayout/</a>. Again depending on your 
	usage, you will need to purchase a license and integrate it into VC 
	following the supplied instructions. Then to enable support in CToasterWnd, 
	you need to define the pre-processor value &quot;CTOASTERWND_HTMLAYOUT_SUPPORT&quot;. 
	If you want to take advantage of its support for so called &quot;behaviors&quot; 
	(Please see the HTMLayout documentation for further information on this), 
	then you also need to pull in the various HTMLayout behaviours header files 
	in your application. This is done in the demo project included in the 
	CToasterWnd download in the &quot;toast.cpp&quot; module. If you fail to pull in 
	support, then the built in support for the &quot;close&quot;, &quot;titletext&quot;, &quot;bodytext&quot; 
	and &quot;icon&quot; hyperlinks will not work in your Toast window.</li>
  <li>To see the class in action, have a look at the code in the module &quot;ToastDlg.cpp&quot;.</li>
</ul>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="History"></a><strong>History</strong></h2>

<p><strong>V1.0 (22 April 2005)</strong> 

<ul>
  <li>Initial public release.</li>
</ul>

<p><strong>V1.01 (23 April 2005)</strong>
<ul>
  <li>Fixed some spelling typos in the documentation.</li>
  <li>Fix for image link on the download page.</li>
  <li>Title and body text can now be optionally made hot or
    not.</li>
  <li>Icon can now be hot.</li>
</ul>

<p><strong>V1.02 (24 April 2005)</strong>
<ul>
  <li> Code now uses SHAppBarMessage to determine the task bar location.</li>
  <li>popup window is now by default offset horizontally as well as vertically by a                          scrollbar</li>
</ul>

<p><strong>V1.03 (25 April 2005)</strong>
<ul>
  <li> Now supports a new transparency animation effect (if on Win2k or later), via a new m_bTransparent member variable. Thanks to Remio for this really cool addition.</li>
</ul>

<p><strong>v1.04 (11 February 2006)</strong><ul>
	<li>Updated the documentation to use the same style as 
	the web site. Also did a spell check of the document.</li>
	<li>Updated the documentation to refer to the need for the Platform SDK if 
	you are compiling the code using VC 6.</li>
	<li>Fixed a number of compiler warnings when the code is compiled using 
	/Wp64.</li>
	<li>Update the copyright details.</li>
</ul>

<p><strong>v1.05 (12 May 2006)</strong><ul>
	<li>Fixed a minor bug in CToasterWnd::Construct where function pointers were 
	not been checked correctly. Thanks to Wes Aday for reporting this issue. 
	</li>
	<li>Fixed a bug in CToasterWnd::OnEraseBkgnd where the vertex values were 
	not being set correctly for the BackgroundDiagonalGradient and 
	ForwardDiagonalGradient styles. Again thanks to Wes Aday for reporting this 
	bug.</li>
</ul>

<p><strong>v1.06 (8 July 2006)</strong><ul>
	<li>Code now uses newer C++ style casts instead of C style casts.</li>
	<li>Updated the code to clean compile on VC 2005</li>
	<li>Close button is now shown hot only when the cursor is within its bounding 
	rect.</li>
	<li>Reworked the notification API somewhat. If you are using notifications, 
	then you should review the new layout of the CToasterNotification class.</li>
	<li>Class now allows you to put HTML text into the toast window. This is 
	provided by the QHTM HTML control provided at
	<a href="http://www.gipsysoft.com/qhtm/">http://www.gipsysoft.com/qhtm/</a>. 
	You may need to purchase a license (depending on the type of application you 
	are developing) as well as follow their <br>
	instructions on deploying it if you want this functionality with CToasterWnd. 
	This functionality by default is not included in CToasterWnd and is only 
	available when you define the preprocessor macro &quot;CTOASTERWND_HTML_SUPPORT&quot;.</li>
	<li>Included support for a new &quot;NoAnimation&quot; animation style.</li>
</ul>

<p><strong>v1.07 (14 December 2006)</strong><ul>
	<li>Code now uses class name constant for QHTML control</li>
	<li>Updated sample app code to clean compile on VC 2005</li>
	<li>Macro to control inclusion of QHTM is now &quot;CTOASTERWND_QHTM_SUPPORT&quot;</li>
	<li>Control now allows you to use the HTMLayout control for HTML support for 
	the toast window. For more information about HTMLayout, please see
	<a href="http://www.terrainformatica.com/htmlayout/">
	http://www.terrainformatica.com/htmlayout/</a></li>
</ul>

<p><strong>v1.08 (17 March 2007)</strong><ul>
	<li>Updated copyright details.</li>
	<li>Removed the automatic inclusion of the various HTMLayout behaviors 
	header files. This avoids causing potential linking errors in client apps, 
	since the behavior objects are declared statically twice. Note that if you 
	want to support HTMLayout behaviors, then it is the responsibility of 
	client apps to pull in the required HTMLayout header files. Thanks to Itamar 
	Syn-Hershko for reporting this problem.</li>
	<li>Addition of 2 simple LoadHTML and LoadUrl helper methods to allow the 
	toaster window to easily be populated with HTML when using the HTMLayout 
	control. Thanks to Itamar Syn-Hershko for this nice addition.</li>
	<li>Addition of a m_dwHTML and m_pbHTML member variables when you are using 
	the HTMLayout control. If you populate these values, then the HTML for the 
	control will be taken from these variables instead of from &quot;m_sText&quot;. Again 
	thanks to Itamar Syn-Hershko for this nice addition.</li>
</ul>

<p><strong>v1.09 (31 March 2007)</strong><ul>
	<li>The existing CToasterWnd::Show method has been internally refactored 
	into a Create method and Popup method. This allows client code to perform 
	any custom initialization on the control prior to it actually being shown to 
	the end user. Thanks to Itamar Syn-Hershko for prompting this suggestion.</li>
</ul>

<p><strong>v1.10 (1 April 2007)</strong><ul>
	<li>Fixed a bug in the LoadHTML and LoadUrl methods where they were 
	incorrectly using the main window handle of the toaster window instead of 
	the window handle of the HTMLayout child control. Thanks to Itamar 
	Syn-Hershko for reporting this bug.</li>
</ul>

<p><strong>v1.11 (21 July 2007)</strong><ul>
	<li>Updated usage instructions about Platform SDK.</li>
	<li>The CToasterNotification notifier interface has been extended to support 
	a &quot;OnHTMLayoutLoadData&quot; method. This allows client code to customize the 
	loading of data when using the HTMLayout control without the need to 
	implement a derived class of CToasterWnd. Thanks to Itamar Syn-Hershko for 
	reporting this suggestion.</li>
	<li>OnHTMLLayoutHyperLink method in CToasterNotification has been renamed to 
	OnHTMLayoutHyperLink</li>
	<li>OnHTMLLayoutCommand method in CToasterNotification has been renamed to 
	OnHTMLayoutCommand</li>
</ul>

<p><strong>v1.12 (20 August 2007)</strong><ul>
	<li>Removed an unnecessary ASSERT in CToasterWnd::Popup.</li>
	<li>Internal animation state variable is reset in Close(), OnDestroy(), and 
	HandleClosing methods.</li>
	<li>Updated the sample app to show how you can reuse a CToasterWnd window if 
	you so desire. Thanks to Itamar Syn-Hershko for suggesting this update.</li>
</ul>

<p><strong>v1.13 (13 July 2008)</strong><ul>
	<li>Updated copyright details.</li>
	<li>Updated sample app to clean compile on VC 2008</li>
	<li>The code has now been updated to support VC 2005 or later only. </li>
	<li>Code now compiles cleanly using Code Analysis (/analyze)</li>
	<li>Removed VC 6 style AppWizard comments from the code.</li>
</ul>

<p><strong>v1.14 (17 August 2008)</strong><ul>
	<li>Fixed a bug where if the calculated body text height was larger than the 
	allowable window size, you previously got the title text intersecting with 
	the title text. Thanks to Steven Dwyer for reporting this issue.</li>
	<li>Changed the default DrawText formatting flags for the body text to 
	DT_NOPREFIX | DT_CENTER | DT_WORDBREAK | DT_EDITCONTROL. This is a better 
	default value for the typical body text</li>
	<li>Changed the default DrawText formatting flags for the title text to DT_NOPREFIX | DT_LEFT | DT_SINGLELINE | DT_END_ELLIPSIS. This is a better 
	default value for the typical title text</li>
</ul>

<p><strong>v1.15 (10 December 2008)</strong><ul>
	<li>The timer interval used for the opening and closing animation is now 
	controllable via a member variable</li>
	<li>The size of the pixels in which to increase or decrease the window size 
	during the animation can now be controlled via a member variable</li>
	<li>Fixed a bug where the window could end completely transparent after the 
	initial opening animation</li>
	<li>Fixed a bug where the final size of the window could end up incorrect</li>
	<li>The control now uses double buffered drawing to help eliminate 
	flickering when the opening and closing animation is happening. Thanks to 
	&quot;sky&quot; for prompting this update.</li>
</ul>

<p><strong>v1.16 (14 December 2008)</strong><ul>
	<li>The control now supports drawing an alpha blended image in its client 
	area. This is achieved using the new member variables: m_Logo, m_rectLogoSrc, 
	m_rectLogoDest and m_nLogoSrcAlpha. The code internally uses the CImage 
	class and its support for alpha blending via the Win32 API function 
	AlphaBlend. To use this functionality in the control you must define the 
	preprocessor variable WINVER to be &gt;= 500. Thanks to &quot;Sky&quot; for prompting 
	this update.</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="Enhancements"></a><strong>Planned Enhancements</strong></h2>

<ul>
  <li>If you have any other suggested
    improvements, please let me know so that I can incorporate them into the next release.</li>
</ul>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="Contact"></a>Contacting the Author</h2>

<p>PJ Naughter<br>
Email: <a href="mailto:pjna@naughter.com">pjna@naughter.com</a><br>
Web: <a href="http://www.naughter.com">http://www.naughter.com</a><br>
14 December 2008</p>
</body>
</html>
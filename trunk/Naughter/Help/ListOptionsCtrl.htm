<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>CListOptionsCtrl v1.22</title>
<link rel="stylesheet" type="text/css" href="naughter.css">
</head>

<body>

<h2 align="left">CListOptionsCtrl v1.22</h2>
<p>Welcome to <strong>CListOptionsCtrl</strong>, a control which implements a properties 
browser control similar to the properties browser in Visual Basic. In addition to 
Boolean values, it also allows edit boxes, combo boxes, file browser, folder browsers, 
font browsers, font name combo boxes, general opaque objects, date controls, time 
controls and IP address controls. Included below is a snapshot showing the demo 
application and what the control looks like. </p>
<p>&nbsp;</p>
<p><img border="0" src="listoptionsctrl.gif" width="545" height="417"></p>
<p>&nbsp;</p>
<table border="0">
	<tr>
		<td><a href="#Features">Features</a></td>
	</tr>
	<tr>
		<td><a href="#Copyright">Copyright</a></td>
	</tr>
	<tr>
		<td><a href="#Usage">Usage</a></td>
	</tr>
	<tr>
		<td><a href="#History">History</a></td>
	</tr>
	<tr>
		<td><a href="#APIReference">API Reference</a></td>
	</tr>
	<tr>
		<td><a href="#Enhancements">Planned Enhancements</a></td>
	</tr>
	<tr>
		<td><a href="#Contact">Contacting the Author</a></td>
	</tr>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a name="Features"></a>Features </h2>
<ul>
	<li>Derived from the MFC class CListCtrl so if you have used this class before, 
	then you should get up to speed using the CListOptionsCtrl pretty easily.</li>
	<li>Items supported included Booleans, edit boxes, combo boxes (drop list and 
	editable), Edit boxes with spin control, File browser, Folder browser, Color 
	selector, Font selector, Font Name selector and Boolean selector &lt;g&gt;!.</li>
	<li>Code is UNICODE enabled and build configurations are provided.</li>
	<li>All widget classes (e.g. Combo boxes and edit boxes) that are created can 
	be customized without affected the base code.</li>
	<li>All code compiles cleanly at level 4.</li>
	<li>Small footprint, total size amounts to just c. 1800 lines of code, for such 
	a large amount of functionality.</li>
	<li>The font and text and background colors can be customized for both the first 
	(prompt) and second (value) columns in the control.</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a name="Copyright"></a>Copyright</h2>
<ul>
	<li>You are allowed to include the source code in any product (commercial, shareware, 
	freeware or otherwise) when your product is released in binary form.</li>
	<li>You are allowed to modify the source code in any way you want except you 
	cannot modify the copyright details at the top of each module.</li>
	<li>If you want to distribute source code with your application, then you are 
	only allowed to distribute versions released by the author. This is to maintain 
	a single distribution point for the source code.</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a name="Usage"></a>Usage </h2>
<ul>
	<li>To use the class in your code simply include ListOptionsCtrl.cpp in your 
	project and #include &quot;ListOptionsCtrl.h&quot; in which ever of your modules needs 
	to make calls to the class.</li>
	<li>You also need to copy over the strings from the sample apps string table 
	(IDS_LISTOPTIONS_...)</li>
	<li>As of v1.22, the classes are now designed for VC 2005 or later. 
	They will not compile on earlier releases of VC.</li>
	<li>Your code will need to include MFC either statically or dynamically.</li>
	<li>To see the class in action, have a look at the usage of the code in the 
	module &quot;appDlg.cpp&quot;.</li>
	<li>Once you have hooked up the control, you can setup the image list as per 
	a normal CListCtrl. To change the depth of each item (to accommodate large edit 
	boxes / combo boxes) just make the height of the bitmap you want to use for 
	the image list greater than the normal 16 pixels. This is the case with the 
	sample code provided.</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a name="History"></a>History </h2>
<p><strong>V1.0 (5 December 2001)</strong> </p>
<ul>
	<li>Initial public release.</li>
</ul>
<p><strong>V1.1 (13 January 2002)</strong> </p>
<ul>
	<li>Made _ListOptionsItemData structure globally available and renamed it to 
	CListOptionsItemData.</li>
	<li>Each child control class now is initialized with the index of the list view 
	control at which it is created. This allows added flexibility in what a child 
	control can do.</li>
	<li>Added a method to add an &quot;Opaque Browser&quot; to the list options control. An 
	Opaque Browser is where the list options control allows a end user specified 
	structure to be edited by the list options control without it explicitly knowing 
	what it is editing. A standard &quot;...&quot; browse button is used and virtual functions 
	are used to allow end user code to implement the required &quot;browsing&quot; functionality 
	at the right time.</li>
	<li>Added a WM_SIZE handler to allow the class to work correctly where the containing 
	view or dialog resizes it for layout reasons.</li>
	<li>Fixed a problem in CListOptionsCtrl::OnKillFocus which was not checking 
	the value of GetSelectedItem before using it</li>
	<li>Updated copyright messages in code and in documentation</li>
</ul>
<p><strong>V1.11 (23 January 2002)</strong> </p>
<ul>
	<li>Improved the &quot;Opaque Browser&quot; support to allow the two runtime classes to 
	be specified e.g. you can have a combo box in addition to a button.</li>
</ul>
<p><strong>V1.12 (31 May 2002)</strong> </p>
<ul>
	<li>Color is now optionally drawn in the icon for color browser items</li>
</ul>
<p><strong>V1.13 (1 June 2002)</strong> </p>
<ul>
	<li>Moved application and code to VC 6.</li>
	<li>Now fully supports the CDateTimeCtrl for editing of dates and times</li>
</ul>
<p><strong>V1.14 (2 June 2002)</strong> </p>
<ul>
	<li>Now fully supports the CIPAddressCtrl for editing of IP addresses.</li>
</ul>
<p><strong>V1.15 (17 October 2002)</strong> </p>
<ul>
	<li>Changed function &quot;BrowserForOpaque&quot; to &quot;BrowseForOpaque&quot;</li>
</ul>
<p><strong>V1.16 (5 May 2004)</strong> </p>
<ul>
	<li>Fixed some compiler warnings when the code is compiled using VC 7.x. Please 
	note that to implement these fixes, the code will now require the Platform SDK 
	to be installed if you compile the code on VC 6.</li>
</ul>
<p><strong>V1.17 (26 November 2004)</strong> </p>
<ul>
	<li>Fixed a bug where in place editing would fail on a multiple monitor setup 
	when the listoptions control was on a monitor which had negative coordinates 
	relative to the primary display</li>
</ul>
<p><strong>V1.18 (3 May 2006)</strong> </p>
<ul>
	<li>Updated the copyright details.</li>
	<li>Control now allows the per item text to be Bold, italic or underlined or 
	any combination of the three.</li>
	<li>Optimized the construction of member variables in all classes</li>
	<li>Inlined the virtual destructors.</li>
	<li>Provided a set of macros which allow the code to be easily added to an extension 
	DLL.</li>
	<li>Control now uses WM_USER instead of WM_APP for private messages</li>
	<li>Prompt and value text color and background color can also be customized.</li>
	<li>Updated documentation to use the same style as the web site.</li>
	<li>Did a spell check of the documentation.</li>
</ul>
<p><strong>V1.19 (8 May 2006)</strong> </p>
<ul>
	<li>Removed unnecessary message map for CListOptionsSpinCtrl WM_CHAR</li>
	<li>Removed unnecessary message map for CListOptionsBrowseButton WM_CHAR</li>
	<li>Reworked CListOptionsDateCtrl::GetDisplayText to handle variable length 
	data</li>
	<li>Reworked CListOptionsTimeCtrl::GetDisplayText to handle variable length 
	data</li>
	<li>Removed unnecessary message map for CListOptionsTimeCtrl WM_CREATE</li>
	<li>CListOptionsEdit::GetBrowseForFolderCaption(), CListOptionsEdit::GetBrowseForFileCaption() 
	and CListOptionsEdit::GetFileExtensionFilter() now use string resources instead 
	of string literals.</li>
</ul>
<p><strong>V1.20 (7 July 2006)</strong> </p>
<ul>
	<li>Code now uses newer C++ style casts instead of C style casts.</li>
	<li>Removed various unused constructors and destructors in the sample app&#39;s 
	code.</li>
	<li>Updated code to compile cleanly using VC 2005.</li>
</ul>
<p><strong>V1.21 (23 December 2007)</strong></p>
<ul>
	<li>Updated copyright details.</li>
	<li>Removed VC 6 style AppWizard comments from the code.</li>
	<li>Optimized CListOptionsItemData constructor code</li>
	<li>Boolean member variables of CListOptionsItemData have now been made &quot;bool&quot; 
	instead of &quot;BOOL&quot;</li>
	<li>Fixed an issue where if you create a combo box with a style of 
	CBS_DROPDOWN instead of CBS_DROPDOWNLIST, then the combo box would not be 
	properly deactivated when it loses focus to a control outside of the 
	ListOptionsCtrl while the cursor is in the combo box edit field. Thanks to 
	Tobias Wolf for reporting this issue.</li>
	<li>Fixed a crash where you select a combo box item, select something in it 
	and then hit tab.</li>
	<li>Focus is now correctly transferred to a list options button if you hit 
	tab on a list options combo box.</li>
</ul>
<p><strong>V1.22 (15 June 2008)</strong></p>
<ul>
	<li>Updated copyright details</li>
	<li>Code now compiles cleanly using Code Analysis (/analyze)</li>
	<li>Updated code to compile correctly using _ATL_CSTRING_EXPLICIT_CONSTRUCTORS 
	define</li>
	<li>The code now only supports VC 2005 or later. </li>
	<li>Replaced all calls to CopyMemory with memcpy</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a name="APIReference"></a>API Reference </h2>
<p>The API consists of the following class members and global functions</p>
<p><strong><a href="#AddBoolean">CListOptionsCtrl::AddBoolean</a><br>
</strong><strong><a href="#AddComboBox">CListOptionsCtrl::AddComboBox</a><br>
<a href="#AddEditBox">CListOptionsCtrl::AddEditBox</a><br>
<a href="#AddFileEditBox">CListOptionsCtrl::AddFileEditBox</a><br>
<a href="#AddFolderEditBox">CListOptionsCtrl::AddFolderEditBox</a><br>
</strong><a href="#AddColorSelector"><b>CListOptionsCtrl</b></a><b><a href="#AddColorSelector">::AddColorSelector</a><br>
<a href="#AddFontSelector">CListOptionsCtrl::AddFontSelector<br>
</a></b><strong><a href="#IsBoolean">CListOptionsCtrl::IsBoolean</a><br>
<a href="#IsEditBox">CListOptionsCtrl::IsEditBox</a></strong><strong><br>
<a href="#IsFileItem">CListOptionsCtrl::IsFileItem</a><br>
<a href="#IsFolderItem">CListOptionsCtrl::IsFolderItem</a><br>
<a href="#IsColorItem">CListOptionsCtrl::IsColorItem</a><br>
<a href="#IsFontItem">CListOptionsCtrl::IsFontItem<br>
</a><a href="#GetBoolean">CListOptionsCtrl::GetBoolean</a><br>
<a href="#GetComboText">CListOptionsCtrl::GetComboText</a><br>
<a href="#GetEditText">CListOptionsCtrl::GetEditText</a><br>
<a href="#GetFileEditText">CListOptionsCtrl::GetFileEditText</a><br>
<a href="#GetFolderEditText">CListOptionsCtrl::GetFolderEditText</a><br>
</strong><b><a href="#GetColor">CListOptionsCtrl::GetColor</a><br>
<a href="#GetFontItem">CListOptionsCtrl::GetFontItem<br>
</a></b><strong><a href="#SetBoolean">CListOptionsCtrl::SetBoolean</a><br>
<a href="#SetComboText">CListOptionsCtrl::SetComboText</a><br>
<a href="#SetEditText">CListOptionsCtrl::SetEditText</a><br>
<a href="#SetFileEditText">CListOptionsCtrl::SetFileEditText</a><br>
<a href="#SetFolderEditText">CListOptionsCtrl::SetFolderEditText</a><br>
</strong><b><a href="#SetColor">CListOptionsCtrl::SetColor</a><br>
<a href="#SetFontItem">CListOptionsCtrl::SetFontItem<br>
</a></b><strong><a href="#DDX_ListBoolean">DDX_ListBoolean</a><br>
<a href="#DDX_ListEdit">DDX_ListEdit<br>
</a><a href="#DDX_ListCombo">DDX_ListCombo</a> <a href="#DDX_ListRadio"><br>
</a></strong><b><a href="#DDX_ListFileEdit">DDX_ListFileEdit<br>
</a><a href="#DDX_ListFolderEdit">DDX_ListFolderEdit<br>
</a><a href="#DDX_ListColor">DDX_ListColor</a><br>
<a href="#DDX_ListFont">DDX_ListFont</a><br>
</b></p>
<strong>
<p><a name="IsBoolean"></a>CListOptionsCtrl::IsBoolean</p>
</strong>
<p><b>BOOL IsCheckBox(int</b> <em>nIndex</em><b>);</b></p>
<strong>
<p><strong>Return Value</strong></p>
</strong>
<p>TRUE if the specified item is a check box item otherwise FALSE.</p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> index of the item to check the type of.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Checks to see if the specified item is a boolean combo box item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="IsEditBox"></a>CListOptionsCtrl::IsEditBox</p>
<p><b>BOOL IsEditBox(int</b> </strong><em>nIndex</em><strong><b>);</b> </strong>
</p>
<strong>
<p>Return Value</p>
</strong>
<p>TRUE if the specified item is a edit box item otherwise FALSE.</p>
<strong>
<p>Parameters</p>
</strong>
<p><em>nIndex</em> Index of the item to check the type of.</p>
<strong>
<p>Remarks</p>
</strong>
<p>Checks to see if the specified item is a edit box item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="IsFileItem"></a>CListOptionsCtrl::IsFileItem</p>
<p><b>BOOL IsFileItem(int</b> </strong><em>nIndex</em><strong><b>);</b> </strong>
</p>
<strong>
<p>Return Value</p>
</strong>
<p>TRUE if the specified item is a file browser item otherwise FALSE.</p>
<strong>
<p>Parameters</p>
</strong>
<p><em>nIndex</em> Index of the item to check the type of.</p>
<strong>
<p>Remarks</p>
</strong>
<p>Checks to see if the specified item is a file browser item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="IsFolderItem"></a>CListOptionsCtrl::IsFolderItem</p>
<p><b>BOOL IsFolderItem(int</b> </strong><em>nIndex</em><strong><b>);</b>
</strong></p>
<strong>
<p>Return Value</p>
</strong>
<p>TRUE if the specified item is a folder browser item otherwise FALSE.</p>
<strong>
<p>Parameters</p>
</strong>
<p><em>nIndex</em> Index of the item to check the type of.</p>
<strong>
<p>Remarks</p>
</strong>
<p>Checks to see if the specified item is a folder browser item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="IsColorItem"></a>CListOptionsCtrl::IsColorItem</p>
<p><b>BOOL IsColorItem(int</b> </strong><em>nIndex</em><strong><b>);</b>
</strong></p>
<strong>
<p>Return Value</p>
</strong>
<p>TRUE if the specified item is a color browser item otherwise FALSE.</p>
<strong>
<p>Parameters</p>
</strong>
<p><em>nIndex</em> Index of the item to check the type of.</p>
<strong>
<p>Remarks</p>
</strong>
<p>Checks to see if the specified item is a color browser item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="IsFontItem"></a>CListOptionsCtrl::IsFontItem</p>
<p><b>BOOL IsFontItem(int</b> </strong><em>nIndex</em><strong><b>);</b> </strong>
</p>
<strong>
<p>Return Value</p>
</strong>
<p>TRUE if the specified item is a font browser item otherwise FALSE.</p>
<strong>
<p>Parameters</p>
</strong>
<p><em>nIndex</em> Index of the item to check the type of.</p>
<strong>
<p>Remarks</p>
</strong>
<p>Checks to see if the specified item is a font browser item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="SetBoolean"></a>CListOptionsCtrl::SetBoolean</p>
</strong>
<p><b>BOOL SetBoolean(int</b> <em>nIndex</em>, <b>BOOL</b> <em>bValue</em><b>);</b></p>
<strong>
<p><strong>Return Value</strong></p>
</strong>
<p>TRUE if the state of the item was successfully changed otherwise FALSE.</p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to change the boolean state of.</p>
<p><em>bValue</em> The state of the boolean combo box to be set.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Changes the boolean state of a boolean combo box item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="GetBoolean"></a>CListOptionsCtrl::GetBoolean</p>
</strong>
<p><b>BOOL GetBoolean(int</b> <em>nIndex</em>, <b>BOOL&amp;</b> <em>bValue</em><b>);</b></p>
<p><b>Return Value</b></p>
<p>TRUE if the state of the item was successfully retrieved otherwise 
FALSE.</p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to retrieve the boolean state of.</p>
<p><em>bCheck</em> Upon successful return, this will contain the state of the boolean 
check box.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Retrieves the boolean state of a boolean combo box item.</p>
<p>&nbsp;</p>
<strong>
<p><a name="AddBoolean"></a>CListOptionsCtrl::AddBoolean</p>
</strong>
<p><b>BOOL AddBoolean(int</b> <em>nIndex , </em><b>DWORD_PTR</b> <em>dwItemData
</em><b>= 0);</b></p>
<strong>
<p>Return Value</p>
</strong>
<p>TRUE if the boolean combo box item was successfully added otherwise 
FALSE.</p>
<strong>
<p>Parameters</p>
</strong>
<p><em>nIndex</em> Index of the item to add the combo box at.</p>
<p><i>dwItemData</i> The custom item data you want to use with this list item. This 
can be used for whathever you want e.g. to maintain a pointer to a custom structure.</p>
<strong>
<p>Remarks</p>
</strong>
<p>Adds a boolean combo box item to the list control.&nbsp; </p>
<strong>
<p>&nbsp;</p>
</strong><strong>
<p><a name="AddComboBox"></a>CListOptionsCtrl::AddComboBox</p>
</strong>
<p><b>BOOL AddComboBox(int</b> <em>nIndex</em>, <b>CRuntimeClass*</b> <em>pRuntimeClass,
</em><b>DWORD_PTR</b> <em>dwItemData </em><b>= 0);</b></p>
<strong>
<p><strong>Return Value</strong></p>
</strong>
<p>TRUE if the combo box item was successfully added otherwise FALSE.</p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to add the combo box at.</p>
<p><em>pRuntimeClass</em> The runtime class pointer on a class derived from &quot;CListOptionsCombo&quot; 
which is to be added to the list options control.</p>
<p><i>dwItemData</i> The custom item data you want to use with this list item. This 
can be used for whathever you want e.g. to maintain a pointer to a custom structure.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Adds a combo box item to the list control. The combo box by default provides 
a choice of multiple strings from which to pick. You are free to derive your own 
class from &quot;CListOptionsCombo&quot; to implement customized behavior </p>
<strong>
<p>&nbsp;</p>
<p><a name="AddEditBox"></a>CListOptionsCtrl::AddEditBox</p>
</strong>
<p><b>BOOL AddEditBox(int</b> <em>nIndex</em>, <b>CRuntimeClass*</b> <em>pRuntimeClassEditCtrl,
</em><b>DWORD_PTR</b> <em>dwItemData </em><b>= 0);</b></p>
<p><b>BOOL AddEditBox(int</b> <i>nIndex</i>, <b>CRuntimeClass*</b> <i>pRuntimeClassEditCtrl</i>,
<b>CRuntimeClass*</b> <i>pRuntimeClassSpinCtrl</i><em>, </em><b>DWORD_PTR</b>
<em>dwItemData </em><b>= 0);</b></p>
<strong>
<p><strong>Return Value</strong></p>
</strong>
<p>TRUE if the edit box item was successfully added otherwise FALSE.</p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to add the edit box at.</p>
<p><em>pRuntimeClassEditCtrl</em> The runtime class pointer on a class derived from 
&quot;CListOptionsEdit&quot; which is to be added to the list options control.</p>
<p><em>pRuntimeClassSpinCtrl</em> The runtime class pointer on a class derived from 
&quot;CListOptionsSpinCtrl&quot; which is to be attached to the edit box to allow the edit 
box value to be changed using a standard spin control.</p>
<p><i>dwItemData</i> The custom item data you want to use with this list item. This 
can be used for whathever you want e.g. to maintain a pointer to a custom structure.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Adds a edit box item to the list control. The edit box by default allows any 
text to be set. You are free to derive your own class from &quot;CListOptionsEdit&quot; to 
implement customized behavior. You can use the second version of the function to 
add an edit box along with a standard spin control with it.</p>
<strong>
<p>&nbsp;</p>
<p><a name="AddFileEditBox"></a>CListOptionsCtrl::AddFileEditBox</p>
</strong>
<p><b>BOOL AddFileEditBox(int</b> <i>nIndex</i>, <b>CRuntimeClass*</b> <i>pRuntimeClassEditCtrl</i>,
<b>CRuntimeClass*</b> <i>pRuntimeClassBrowseButton</i><em>, </em><b>DWORD_PTR</b>
<em>dwItemData </em><b>= 0);</b></p>
<strong>
<p><strong>Return Value</strong></p>
</strong>
<p>TRUE if the edit box item was successfully added otherwise FALSE.</p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to add the File Browser edit box at.</p>
<p><em>pRuntimeClassEditCtrl</em> The runtime class pointer on a class derived from 
&quot;CListOptionsEdit&quot; which is to be added to the list options control.</p>
<p><i>pRuntimeClassBrowseButton </i>The runtime class pointer on a class derived 
from &quot;CListOptionsBrowseButton&quot; which is to be attached to the edit box to allow 
the edit box value to be changed using a standard file dialog control.</p>
<p><i>dwItemData</i> The custom item data you want to use with this list item. This 
can be used for whathever you want e.g. to maintain a pointer to a custom structure.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Adds a File Browser edit box item to the list control. The edit box by default 
allows any text to be set. You are free to derive your own class from &quot;CListOptionsEdit&quot; 
to implement customized behavior. </p>
<strong>
<p>&nbsp;</p>
<p><a name="AddFolderEditBox"></a>CListOptionsCtrl::AddFolderEditBox</p>
</strong>
<p><b>BOOL AddFolderEditBox(int</b> <i>nIndex</i>, <b>CRuntimeClass*</b> <i>pRuntimeClassEditCtrl</i>,
<b>CRuntimeClass*</b> <i>pRuntimeClassBrowseButton</i><em>, </em><b>DWORD_PTR</b>
<em>dwItemData </em><b>= 0);</b></p>
<strong>
<p><strong>Return Value</strong></p>
</strong>
<p>TRUE if the edit box item was successfully added otherwise FALSE.</p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to add the Folder Browser edit box at.</p>
<p><em>pRuntimeClassEditCtrl</em> The runtime class pointer on a class derived from 
&quot;CListOptionsEdit&quot; which is to be added to the list options control.</p>
<p><i>pRuntimeClassBrowseButton</i> The runtime class pointer on a class derived 
from &quot;CListOptionsBrowseButton&quot; which is to be attached to the edit box to allow 
the edit box value to be changed using a standard folder selection dialog control.</p>
<p><i>dwItemData</i> The custom item data you want to use with this list item. This 
can be used for whathever you want e.g. to maintain a pointer to a custom structure.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Adds a Folder Browser edit box item to the list control. The edit box by default 
allows any text to be set. You are free to derive your own class from &quot;CListOptionsEdit&quot; 
to implement customized behavior. </p>
<strong>
<p>&nbsp;</p>
<p><a name="GetComboText"></a>CListOptionsCtrl::GetComboText</p>
</strong>
<p><b>CString GetComboText(int</b> <em>nIndex</em><b>);</b></p>
<strong>
<p><strong>Return Value</strong></p>
</strong>
<p>The text associated with this combo box item.</p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to retrieve the combo box text of.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Retrieves the combo text of a combo box item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="GetEditText"></a>CListOptionsCtrl::GetEditText</p>
</strong>
<p><b>CString GetEditText(int</b> <em>nIndex</em><b>);</b></p>
<strong>
<p><strong>Return Value</strong></p>
</strong>
<p>The text associated with this edit box item.</p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to retrieve the edit box text of.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Retrieves the edit box text of a edit box item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="GetFileEditText"></a>CListOptionsCtrl::GetFileEditText</p>
</strong>
<p><b>CString GetEditText(int</b> <em>nIndex</em><b>);</b></p>
<strong>
<p><strong>Return Value</strong></p>
</strong>
<p>The text associated with this edit box item.</p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to retrieve the edit box text of.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Retrieves the edit box text of a File Browser edit box item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="GetFolderEditText"></a>CListOptionsCtrl::GetFolderEditText</p>
</strong>
<p><b>CString GetEditText(int</b> <em>nIndex</em><b>);</b></p>
<strong>
<p><strong>Return Value</strong></p>
</strong>
<p>The text associated with this edit box item.</p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to retrieve the edit box text of.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Retrieves the edit box text of a Foldere Browser edit box item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="SetComboText"></a>CListOptionsCtrl::SetComboText</p>
</strong>
<p><b>void SetComboText(int</b> <em>nIndex</em>, <b>const CString&amp;</b> <em>sComboText</em><b>);</b></p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to change the combo box text of.</p>
<p><em>sComboText</em> The text to set in the combo box.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Changes the combo box text of a combo box item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="SetEditText"></a>CListOptionsCtrl::SetEditText</p>
</strong>
<p><b>void SetEditText(int</b> <em>nIndex</em>, <b>const CString&amp;</b> <em>sEditText</em><b>);</b></p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to change the edit box text of.</p>
<p><em>sEditText</em> The text to set in the edit box.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Changes the edit box text of a edit box item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="SetFileEditText"></a>CListOptionsCtrl::SetFileEditText</p>
</strong>
<p><b>void SetFileText(int</b> <em>nIndex</em>, <b>const CString&amp;</b> <em>sEditText</em><b>);</b></p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to change the edit box text of.</p>
<p><em>sEditText</em> The text to set in the edit box.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Changes the edit box text of a File Browser edit box item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="SetFolderEditText"></a>CListOptionsCtrl::SetFolderEditText</p>
</strong>
<p><b>void SetFolderText(int</b> <em>nIndex</em>, <b>const CString&amp;</b> <em>sEditText</em><b>);</b></p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>nIndex</em> Index of the item to change the edit box text of.</p>
<p><em>sEditText</em> The text to set in the edit box.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>Changes the edit box text of a Folder Browser edit box item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="AddColorSelector"></a>CListOptionsCtrl::AddColorSelector</p>
<p><b>BOOL AddColorSelector(int</b> </strong><i>nIndex</i><strong>, <b>CRuntimeClass*</b>
</strong><i>pRuntimeClassButton</i><strong><em>, </em><b>DWORD_PTR</b> </strong>
<em>dwItemData<strong> </strong></em><b><strong>= 0, BOOL </strong></b><i>bDrawColorForIcon</i><b><strong> 
= TRUE);</strong></b></p>
<strong>
<p>Return Value</p>
</strong>
<p>TRUE if the color browser item was successfully added otherwise FALSE.</p>
<strong>
<p>Parameters</p>
</strong>
<p><em>nIndex</em> Index of the item to add the color browser at.</p>
<p><em>pRuntimeClassButton</em> The runtime class pointer on a class derived from 
&quot;CListOptionsBrowseButton&quot; which is to be added to the list options control.</p>
<p><i>dwItemData</i> The custom item data you want to use with this list item. This 
can be used for whathever you want e.g. to maintain a pointer to a custom structure.</p>
<p><i>bDrawColorForIcon</i> If TRUE then the current color is drawn in the items 
icon otherwise the normal icon is drawn.</p>
<strong>
<p>Remarks</p>
</strong>
<p>Adds a Color Browser item to the list control. The color browser displays a standard 
CColorDialog when you hit the browse button. You are free to derive your own class 
from &quot;CListOptionsBrowseButton&quot; to implement customized behavior. </p>
<strong>
<p>&nbsp;</p>
<p><a name="GetColor"></a>CListOptionsCtrl::GetColor</p>
<p><b>COLORREF GetColor(int</b> </strong><em>nIndex</em><strong><b>);</b>
</strong></p>
<strong>
<p>Return Value</p>
</strong>
<p>The COLORREF value associated with this color browser item.</p>
<strong>
<p>Parameters</p>
</strong>
<p><em>nIndex</em> Index of the item to retrieve the COLORREF of.</p>
<strong>
<p>Remarks</p>
</strong>
<p>Retrieves the color of a color browser item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="SetColor"></a>CListOptionsCtrl::SetColor</p>
<p><b>void SetColor(int</b> <em>nIndex</em>, COLORREF </strong><em>color</em><strong><b>);</b></strong></p>
<strong>
<p>Parameters</p>
</strong>
<p><em>nIndex</em> Index of the item to change the color of.</p>
<p><em>color </em>The color to set in the color browser item.</p>
<strong>
<p>Remarks</p>
</strong>
<p>Changes the edit box text of a edit box item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="AddFontSelector"></a>CListOptionsCtrl::AddFontSelector</p>
<p><b>BOOL AddFontSelector(int</b> </strong><i>nIndex</i><strong>, <b>CRuntimeClass*</b>
</strong><i>pRuntimeClassButton</i><strong><em>, </em><b>DWORD_PTR</b> </strong>
<em>dwItemData<strong> </strong></em><strong><b>= 0);</b></strong></p>
<strong>
<p>Return Value</p>
</strong>
<p>TRUE if the font browser item was successfully added otherwise FALSE.</p>
<strong>
<p>Parameters</p>
</strong>
<p><em>nIndex</em> Index of the item to add the color browser at.</p>
<p><em>pRuntimeClassButton</em> The runtime class pointer on a class derived from 
&quot;CListOptionsBrowseButton&quot; which is to be added to the list options control.</p>
<p><i>dwItemData</i> The custom item data you want to use with this list item. This 
can be used for whathever you want e.g. to maintain a pointer to a custom structure.</p>
<strong>
<p>Remarks</p>
</strong>
<p>Adds a font browser item to the list control. The font browser displays a standard 
CFontDialog when you hit the browse button. You are free to derive your own class 
from &quot;CListOptionsBrowseButton&quot; to implement customized behavior. </p>
<strong>
<p>&nbsp;</p>
<p><a name="GetFontItem"></a>CListOptionsCtrl::GetFontItem</p>
<p><b>void GetFontItem(int</b> </strong><em>nIndex</em><em><strong>, </strong>
</em><strong>LOGFONT* </strong><em>pLogFont</em><strong><b>);</b></strong></p>
<strong>
<p>Parameters</p>
</strong>
<p><em>nIndex</em> Index of the item to retrieve the COLORREF of.</p>
<p>pLogFont Upon return this will contain the update LOGFONT structure.</p>
<strong>
<p>Remarks</p>
</strong>
<p>Retrieves the font characteristics of a font browser item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="SetFontItem"></a>CListOptionsCtrl::SetFontItem</p>
<p><b>void SetFontItem(int</b> </strong><em>nIndex</em><strong>, const LOGFONT*
<em>pLogFont</em><b>);</b> </strong></p>
<strong>
<p>Parameters</p>
</strong>
<p><em>nIndex</em> Index of the item to change the color of.</p>
<p><em>pLogFont </em>pointer to the LOGFONT structure to set in the font browser 
item.</p>
<strong>
<p>Remarks</p>
</strong>
<p>Changes the edit font characteristics of a font browser item.</p>
<strong>
<p>&nbsp;</p>
<p><a name="DDX_ListEdit"></a><strong>void DDX_ListEdit(CDataExchange* </strong>
</strong><em>pDX</em><strong>, int </strong><em>nIDC</em><strong>, int </strong>
<em>nIndex</em><strong>, CString&amp; </strong><i>sText</i><strong>);</strong></p>
<strong>
<p><strong>void DDX_ListEdit(CDataExchange* </strong></strong><em>pDX</em><strong>, 
int </strong><em>nIDC</em><strong>, int </strong><em>nIndex</em><strong>, int&amp;
</strong><i>nValue</i><strong>);</strong></p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>pDX</em> A pointer to a
CDataExchange object. The framework supplies this object 
to establish the context of the data exchange, including its direction.</p>
<p><em>nIDC</em> The resource ID of the list 
control associated with the control property.</p>
<p><em>nIndex</em> Index of the item which contains the edit control item.</p>
<p><em>sText</em> A reference to a CString which 
is the text to display or retrieve from the list options control.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>The DDX_ListEdit function 
manages the transfer of CString or integer data between a edit box in the CListOptionsCtrl 
in a dialog box, form view, or control view object and a CString or integer value.</p>
<strong>
<p>&nbsp;</p>
<p><a name="DDX_ListCombo"></a><strong>void DDX_ListCombo(CDataExchange*
</strong></strong><em>pDX</em><strong>, int </strong><em>nIDC</em><strong>, int
</strong><em>nIndex</em><strong>, CString&amp; </strong><i>sText</i><strong>);</strong></p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>pDX</em> A pointer to a
CDataExchange object. The framework supplies this object 
to establish the context of the data exchange, including its direction.</p>
<p><em>nIDC</em> The resource ID of the list 
control associated with the control property.</p>
<p><em>nIndex</em> Index of the item which contains the combo box item.</p>
<p><em>sText</em> A reference to a CString which 
is the text to display or retrieve from the list options control.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>The DDX_ListCombo function 
manages the transfer of CString data between a combo box in the CListOptionsCtrl 
in a dialog box, form view, or control view object and a CString data member.</p>
<strong>
<p>&nbsp;</p>
<p><a name="DDX_ListFileEdit"></a><strong>void DDX_ListFileEdit(CDataExchange*
</strong></strong><em>pDX</em><strong>, int </strong><em>nIDC</em><strong>, int
</strong><em>nIndex</em><strong>, CString&amp; </strong><i>sText</i><strong>);</strong></p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>pDX</em> A pointer to a
CDataExchange object. The framework supplies this object 
to establish the context of the data exchange, including its direction.</p>
<p><em>nIDC</em> The resource ID of the list 
control associated with the control property.</p>
<p><em>nIndex</em> Index of the item which contains the File Browser edit item.</p>
<p><em>sText</em> A reference to a CString which 
is the text to display or retrieve from the list options control.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>The DDX_ListFileEdit 
function manages the transfer of CString data between a File Browser edit box in 
the CListOptionsCtrl in a dialog box, form view, or control view object and a CString 
value.</p>
<strong>
<p>&nbsp;</p>
<p><a name="DDX_ListFolderEdit"></a><strong>void DDX_ListFolderEdit(CDataExchange*
</strong></strong><em>pDX</em><strong>, int </strong><em>nIDC</em><strong>, int
</strong><em>nIndex</em><strong>, CString&amp; </strong><i>sText</i><strong>);</strong></p>
<strong>
<p><strong>Parameters</strong></p>
</strong>
<p><em>pDX</em> A pointer to a
CDataExchange object. The framework supplies this object 
to establish the context of the data exchange, including its direction.</p>
<p><em>nIDC</em> The resource ID of the list 
control associated with the control property.</p>
<p><em>nIndex</em> Index of the item which contains the Folder Browser edit item.</p>
<p><em>sText</em> A reference to a CString which 
is the text to display or retrieve from the list options control.</p>
<strong>
<p><strong>Remarks</strong></p>
</strong>
<p>The DDX_ListFolderEdit 
function manages the transfer of CString data between a Folder Browser edit box 
in the CListOptionsCtrl in a dialog box, form view, or control view object and a 
CString value.</p>
<strong>
<p>&nbsp;</p>
<p><a name="DDX_ListColor"></a>void DDX_ListColor(CDataExchange* </strong><em>pDX</em><strong>, 
int </strong><em>nIDC</em><strong>, int </strong><em>nIndex</em><strong>, COLORREF&amp;
</strong>color<strong>); </strong></p>
<strong>
<p>Parameters</p>
</strong>
<p><em>pDX</em> A pointer to a
CDataExchange object. The framework supplies this object 
to establish the context of the data exchange, including its direction.</p>
<p><em>nIDC</em> The resource ID of the list 
control associated with the control property.</p>
<p><em>nIndex</em> Index of the item which contains the color browser item.</p>
<p><em>color</em> A reference to a COLORREF which 
is the color to display or retrieve from the list options control.</p>
<strong>
<p>Remarks</p>
</strong>
<p>The DDX_ListColor function 
manages the transfer of COLORREF data between a color browser item in the CListOptionsCtrl 
in a dialog box, form view, or control view object and a COLORREF value.</p>
<strong>
<p>&nbsp;</p>
<p><a name="DDX_ListFont"></a>void DDX_ListFont(CDataExchange* </strong><em>pDX</em><strong>, 
int </strong><em>nIDC</em><strong>, int </strong><em>nIndex</em><strong>, LOGFONT*
</strong>pLogFont<strong>); </strong></p>
<strong>
<p>Parameters</p>
</strong>
<p><em>pDX</em> A pointer to a
CDataExchange object. The framework supplies this object 
to establish the context of the data exchange, including its direction.</p>
<p><em>nIDC</em> The resource ID of the list 
control associated with the control property.</p>
<p><em>nIndex</em> Index of the item which contains the font browser item.</p>
<p><em>color</em> A pointer to a LOGFONT strucutre 
which is the font to display or retrieve from the list options control.</p>
<strong>
<p>Remarks</p>
</strong>
<p>The DDX_ListFont function 
manages the transfer of LOGFONT structure data between a font browser item in the 
CListOptionsCtrl in a dialog box, form view, or control view object and a LOGFONT 
structure value.</p>
<strong>
<p>&nbsp;</p>
<p><a name="DDX_ListBoolean"></a>void DDX_ListBoolean(CDataExchange* </strong>
<em>pDX</em><strong>, int </strong><em>nIDC</em><strong>, int </strong><em>nIndex</em><strong>, 
BOOL&amp; </strong>bValue<strong>); </strong></p>
<strong>
<p>Parameters</p>
</strong>
<p><em>pDX</em> A pointer to a
CDataExchange object. The framework supplies this object 
to establish the context of the data exchange, including its direction.</p>
<p><em>nIDC</em> The resource ID of the list 
control associated with the control property.</p>
<p><em>hParent</em> Index of the item which contains the boolean combo box item.</p>
<p><em>color</em> A reference to a BOOL which 
is the boolean value to display or retrieve from the list options control.</p>
<strong>
<p>Remarks</p>
</strong>
<p>The DDX_ListBoolean 
function manages the transfer of BOOL value between a boolean combo box item in 
the CListOptionsCtrl in a dialog box, form view, or control view object and a BOOL 
value.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a name="Enhancements"></a>Planned Enhancements </h2>
<ul>
	<li>If you have any other suggested improvements, please let me know so that 
	I can incorporate them into the next release.</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a name="Contact"></a>Contacting the Author </h2>
<p>PJ Naughter<br>
Email: <a href="mailto:pjna@naughter.com">pjna@naughter.com</a><br>
Web: <a href="http://www.naughter.com">http://www.naughter.com</a><br>
15 June 2008</p>

</body>

</html>

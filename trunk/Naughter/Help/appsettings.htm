<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />

<title>AppSettings v1.08</title>
<link rel="stylesheet" type="text/css" href="./naughter.css" />
</head>

<body bgcolor="#FFFFFF">

<h2 align="left">AppSettings v1.08</h2>

<p>Welcome to <b>
<bold>AppSettings</bold></b>, a collection of freeware MFC classes 
to encapsulate reading and writing application configuration settings.&nbsp; The 
supported output formats are:</p>
<ul>
	<li>Per user in the Registry (HKEY_CURRENT_USER\Software\&quot;Company 
	Name&quot;\&quot;Product Name&quot;\&quot;Product Version&quot;) via the class CHKCUAppSettings</li>
	<li>Per machine in the Registry (HKEY_LOCAL_MACHINE\Software\&quot;Company 
	Name&quot;\&quot;Product Name&quot;\&quot;Product Version&quot;) via the class CHKLMAppSettings</li>
	<li>Service parameters in the registry 
	(HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\&quot;Service 
	Name&quot;\Parameters) via the class CServicesAppSettings. This means that you 
	can use this class in conjunction with the author's own
	<a href="http://www.naughter.com/serv.html">CNTService</a> class framework 
	in preference to the functions for configuration settings provided by that 
	framework.</li>
	<li>A standard windows ini file via the class CIniAppSettings</li>
	<li>An XML file via the class CXMLAppSettings. Internally this class uses 
	the MSXML parser to create and parse the XML.</li>
</ul>
<p>&nbsp;</p>
<p>The ini and xml file locations can be:</p>
<ul>
	<li>A per user roaming file stored in &quot;\Documents and Settings\&lt;User 
	Name&gt;\Application Data\&quot;Company Name&quot;\&quot;Product Name&quot;\&quot;Product Version&quot; via 
	the method CIniAppSettings::GetRoamingDataFileLocation. Note that this 
	method will only work if IE4 integrated shell is installed on Windows 95. 
	Otherwise out of the box, this will work on Windows 98 or later.</li>
	<li>A per user non-roaming file stored in &quot;\Documents and Settings\&lt;User 
	Name&gt;\Local Settings\Application Data\&quot;Company Name&quot;\&quot;Product Name&quot;\&quot;Product 
	Version&quot; via the method CIniAppSettings::GetNonRoamingDataFileLocation. Note 
	that this method will only work on Windows 2000 or later.</li>
	<li>A per computer (non-user specific and non-roaming) file stored in 
	&quot;\Documents and Settings\All Users\Application Data\&quot;Company Name&quot;\&quot;Product 
	Name&quot;\&quot;Product Version&quot; via the method 
	CIniAppSettings::GetPerComputerDataFileLocation. Note that this method will 
	only work on Windows 2000 or later.</li>
	<li>A file in the same directory as the current process via the method 
	CIniAppSettings::GetCurrentProcessIniFileLocation. Note, that using this 
	location for an ini or xml file is not a good idea for security reasons.</li>
	<li>Any other location via a call to CIniAppSettings::SetIniFile or 
	CXMLAppSettings::SetXMLFile.</li>
</ul>

<p>&nbsp;</p>

<table>
  <tbody>
  <tr>
    <td><a href="#Features">Features</a></td>
  </tr>
  <tr>
    <td><a href="#Copyright">Copyright</a></td>
  </tr>
  <tr>
    <td><a href="#Usage">Usage</a></td>
  </tr>
  <tr>
    <td><a href="#History">History</a></td>
  </tr>
  <tr>
    <td><a href="#Contact">Contacting the Author</a></td>
  </tr>
</tbody>
</table>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="Features"></a>Features


</h2>


<ul>
  <li>5 different output formats are supported as mentioned above.</li>
	<li>To keep the API's as consistent as possible between each of the 5 main 
	classes, they all implement a COM like interface called &quot;IAppSettings&quot;. This 
	concept is similar to a COM or .NET interface and allows you to easily swap 
	the output formats without having to rewrite your Get... / Write... code. 
	The API consists of the functions defined in the IAppSettings virtual base 
	class in AppSettings.h&quot;</li>
	<li>The API's are loosely based on the persistence functions built into 
	MFC's CWinApp class which support the HKCU registry and simple ini files. 
	Changing your code to support AppSettings should be relatively simply. You 
	then quickly gain output format independence and easy access to the 
	locations which MS considers best practice for application settings.</li>
	<li>The classes hides the low level details of manipulating an XML DOM if 
	all you want in your XML file is some simple application settings.</li>
  <li>Works equally well in Unicode as well as ASCII builds.</li>
  <li>The classes make use of exceptions to report errors to help client code 
	which is developed to be as robust as possible.</li>
  <li>The registry and xml output format can also be optionally flushed upon a 
	write or left to be lazy written.</li>
	<li>The xml output format can be optionally &quot;pretty printed&quot;.</li>
	<li>Unlike the MFC CWinApp persistence functions, these classes throw 
	exceptions when a value is not located. This allows you to easily 
	distinguish from when a configuration setting is present and is the default 
	value and when it is not present. Your client code should expect these 
	unexpected conditions and handle them by catching the &quot;CAppSettingsException*&quot; 
	exceptions which are throw in these cases.</li>
</ul>

<p>&nbsp;</p>
<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="Copyright"></a><b>Copyright</b></h2>
<ul>
  <li>You are allowed to include the source code in any product (commercial, 
	shareware, freeware or otherwise) when your product is released in binary 
	form.</li>
  <li>You are allowed to modify the source code in any way you want except you 
	cannot modify the copyright details at the top of each module.</li>
  <li>If you want to distribute source code with your application, then you are 
	only allowed to distribute versions released by the author. This is to 
	maintain a single distribution point for the source code.</li>
</ul>
<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="Usage"></a>Usage

</h2>

<ul>
  <li>To use the classes in your code simply add the AppSettings.h file to your 
	project.</li>
  <li>Your code will need to include MFC either statically or dynamically.</li>
	<li>You will also need to add ATL support to your project (simple add 
	atlbase.h to your stdafx.h if your project is currently an MFC only 
	project). This is because the XML 
	app settings class uses the &quot;CComPtr&quot; class to wrap access to the raw MSXML interfaces. 
	I could have used the raw COM interfaces or used #import, but the first 
	choice just adds to the chance that you leak a COM interface and the second 
	choice would have meant that I would have to convert from &quot;_com_error&quot; 
	exceptions to the &quot;CAppSettingsException&quot; exceptions which thee App Settings 
	classes use.</li>
  <li>To see the classes in action, have a look at the code in 
	TestAppSettings.cpp which exercises all of the classes and their methods.</li>
	<li>As of v1.07, the code is now for Visual C++ 2005 or later. I 
will not be supporting VC 6 anymore for this code, so please don't email me 
requesting this&lt;gg&gt;. Remember VC 6 is now a ten year old compiler. It's 
now time to upgrade to VC 
2005 or VC 2008!</li>
</ul>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="History"></a>History</h2>

<p><strong>V1.0 (11 June 2006)</strong> 

</p> 

<ul>
  <li>Initial public release.</li>
</ul>

<p><strong>V1.01 (29 July 2006)</strong> 

</p> 

<ul>
	<li>All AppSettings classes now support &quot;GetSection&quot; and &quot;WriteSection&quot; 
	methods. These new functions are modelled on the &quot;GetPrivateProfileSection&quot; 
	and &quot;WritePrivateProfileSection&quot; Win32 API calls. Thanks to Brad Bruce for 
	suggesting these updates.</li>
	<li>Made the AfxThrowWin32AppSettingsException function a member of 
	IAppSettings and renamed it to ThrowWin32AppSettingsException</li>
	<li>Made the AfxThrowCOMAppSettingsException function a member of 
	IAppSettings and renamed it to ThrowCOMAppSettingsException</li>
	<li>Code now uses newer C++ style casts instead of C style casts.</li>
	<li>Made all the WriteBinary methods now accept a const BYTE* parameter 
	instead of LPBYTE</li>
	<li>Updated the code to clean compile on VC 2005</li>
	<li>Fixed a bug in CXMLAppSettings::GetBinary where returned binary data was 
	being returned incorrectly.</li>
</ul>

<p><strong>V1.02 (19 August 2006)</strong> 

</p> 

<ul>
  <li>Fixed compile problems when code is compiled in a mixed MFC / ATL project.</li>
	<li>Addition of &quot;WriteProfile...&quot; functions to IAppSettings which provides 
	similiar functionality to the MFC CWinApp functions of the same name. These 
	new functions allow you to ignore errors reading a value and instead return 
	a default value.</li>
	<li>Removed the MFC C++ runtime macros from CAppSettingsException as they 
	were not really required.</li>
</ul>

<p><strong>V1.03 (6 January 2007)</strong> 

</p> 

<ul>
	<li>Updated copyright details. </li>
	<li>Fixed a bug in CRegistryAppSettings::SetStringArrayIntoRegistry related 
	to use of _tcscpy_s </li>
	<li>Fixed a bug in CIniAppSettings::WriteStringArray related to use of _tcscpy_s 
	</li>
	<li>Fixed a bug in CXMLAppSettings::WriteStringArray related to use of _tcscpy_s</li>
</ul>

<p><strong>V1.04 (5 July 2007)</strong> 

</p> 

<ul>
	<li>Added support for &quot;Pretty Printing&quot; to the CXMLAppSettings class. This 
	is achieved through an additional parameter to the constructor.</li>
</ul>

<p><strong>V1.05 (24 December 2007)</strong> 

</p> 

<ul>
	<li>CAppSettingsException::GetErrorMessage now uses the 
	FORMAT_MESSAGE_IGNORE_INSERTS flag. For more information please see Raymond 
	Chen's blog at
	<a href="http://blogs.msdn.com/oldnewthing/archive/2007/11/28/6564257.aspx">
	http://blogs.msdn.com/oldnewthing/archive/2007/11/28/6564257.aspx</a>. 
	Thanks to Alexey Kuznetsov for reporting this issue.</li>
	<li>Minor update to display HRESULT's correctly.</li>
</ul>

<p><strong>V1.06 (28 December 2007)</strong> 

</p> 

<ul>
	<li>CAppSettingsException::GetErrorMessage now uses Checked::tcsncpy_s if 
	compiled using VC 2005 or later.</li>
</ul>

<p><strong>V1.07 (6 June 2008)</strong> 

</p> 

<ul>
	<li>Updated copyright details.</li>
	<li>Updated sample app to clean compile on VC 2008</li>
	<li>The code has now been updated to support VC 2005 or later only. </li>
	<li>Code now compiles cleanly using Code Analysis (/analyze) </li>
</ul>

<p><strong>V1.08 (19 March 2009)</strong> 

</p> 

<ul>
	<li>Updated copyright details.</li>
	<li>Updated the sample app solution settings to use more reasonable defaults</li>
	<li>The IAppSettings interface now supports a new GetSections method. This 
	returns all the root sections which a configuration file has. Thanks to Rolf 
	Kristensen for prompting this nice addition to the classes.</li>
	<li>Updated the IAppSettings::GetSection method to support a boolean &quot;bWithValues&quot; 
	parameter which determines if the returned string array should or should 
	name include the values. This allows client code to easily get all the 
	sections names. Thanks to Rolf Kristensen for providing this nice addition 
	to the classes.</li>
	<li>Reworked most of the internal code which does heap allocations using 
	&quot;new&quot; to instead now use ATL::CHeapPtr.</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="Contact"></a>Contacting the Author</h2>

<p>PJ Naughter<br />
Email: <a href="mailto:pjna@naughter.com">pjna@naughter.com</a><br />
Web: <a href="http://www.naughter.com">http://www.naughter.com</a><br />
19 March 2009</p>
</body>
</html>